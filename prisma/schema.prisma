// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"] //Change this to match your target environment
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  username           String              @unique
  displayName        String
  password           String
  profilePic         String? // path to encrypted blob
  profileIv          String? // IV for decryption, base64
  userChatKeys       UserChatKey[] // encrypted keys for each chat
  isAdmin            Boolean             @default(false)
  createdAt          DateTime            @default(now())
  sessions           Session[]
  ownedChats         Chat[]              @relation("OwnedChats")
  chatParticipations ChatParticipant[]
  messages           Message[]           @relation("SentMessages")
  readMessages       Message[]           @relation("ReadMessages")
  publicUserChatKeys PublicUserChatKey[]
  keyPair            KeyPair?
}

// With users master key encrypted chat keys for multi device setup
model UserChatKey {
  userId      String
  chatId      String
  user        User                 @relation(fields: [userId], references: [id])
  keyVersions UserChatKeyVersion[]

  @@id([userId, chatId])
}

model UserChatKeyVersion {
  userChatKey  UserChatKey @relation(fields: [userId, chatId], references: [userId, chatId])
  userId       String
  chatId       String
  keyVersion   Int
  encryptedKey String // base64

  @@id([userId, chatId, keyVersion])
}

model KeyPair {
  userId              String
  encryptedPrivateKey String // base64
  publicKey           String // base64, for sharing with others
  publicKeyHmac       String
  createdAt           DateTime @default(now())
  user                User     @relation(fields: [userId], references: [id])

  @@id([userId])
}

// For sharing of the chat key to each user newly added to a group/dm
model PublicUserChatKey {
  userId       String
  chatId       String
  keyVersion   Int
  encryptedKey String // base64, encrypted with users (verified) public key
  user         User   @relation(fields: [userId], references: [id])
  chat         Chat   @relation(fields: [chatId], references: [id])

  @@id([userId, chatId, keyVersion])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id                 String              @id @default(uuid())
  currentKeyVersion  Int
  name               String? // Group name, null for DM
  type               String // 'dm' or 'group'
  image              String? // path to encrypted blob
  imageIv            String? // IV for decryption, base64
  ownerId            String
  owner              User                @relation("OwnedChats", fields: [ownerId], references: [id])
  participants       ChatParticipant[]
  messages           Message[]
  systemMessages     SystemMessage[]
  publicUserChatKeys PublicUserChatKey[]
}

model ChatParticipant {
  chatId         String
  userId         String
  joinKeyVersion Int
  joinedAt       DateTime @default(now())

  chat Chat @relation(fields: [chatId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([chatId, userId])
}

model Message {
  id                 String    @id @default(uuid())
  usedKeyVersion     Int
  chatId             String
  senderId           String
  attachments        String[]
  encryptedReactions String[] // userId:encryptedReactions base64
  readBy             User[]    @relation("ReadMessages")
  encryptedContent   String // Encrypted message blob, base64
  isEdited           Boolean   @default(false)
  timestamp          DateTime  @default(now())
  user               User      @relation("SentMessages", fields: [senderId], references: [id])
  chat               Chat      @relation(fields: [chatId], references: [id])
  replyTo            Message?  @relation("Replies", fields: [replyToId], references: [id])
  replyToId          String?
  replies            Message[] @relation("Replies")
}

model SystemMessage {
  id             String   @id @default(uuid())
  usedKeyVersion Int // current key version at time of message so new users don't get old system messages
  chatId         String
  content        String
  timestamp      DateTime @default(now())
  chat           Chat     @relation(fields: [chatId], references: [id])
}

model ServerSettings {
  id               String   @id @default("singleton")
  allowedUsernames String[]

  @@unique([id]) // Ensure only one instance exists
}
