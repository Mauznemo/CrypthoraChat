
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UserChatKey` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UserChatKey
 * 
 */
export type UserChatKeyModel = runtime.Types.Result.DefaultSelection<Prisma.$UserChatKeyPayload>

export type AggregateUserChatKey = {
  _count: UserChatKeyCountAggregateOutputType | null
  _min: UserChatKeyMinAggregateOutputType | null
  _max: UserChatKeyMaxAggregateOutputType | null
}

export type UserChatKeyMinAggregateOutputType = {
  userId: string | null
  chatId: string | null
  encryptedKey: string | null
}

export type UserChatKeyMaxAggregateOutputType = {
  userId: string | null
  chatId: string | null
  encryptedKey: string | null
}

export type UserChatKeyCountAggregateOutputType = {
  userId: number
  chatId: number
  encryptedKey: number
  _all: number
}


export type UserChatKeyMinAggregateInputType = {
  userId?: true
  chatId?: true
  encryptedKey?: true
}

export type UserChatKeyMaxAggregateInputType = {
  userId?: true
  chatId?: true
  encryptedKey?: true
}

export type UserChatKeyCountAggregateInputType = {
  userId?: true
  chatId?: true
  encryptedKey?: true
  _all?: true
}

export type UserChatKeyAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserChatKey to aggregate.
   */
  where?: Prisma.UserChatKeyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserChatKeys to fetch.
   */
  orderBy?: Prisma.UserChatKeyOrderByWithRelationInput | Prisma.UserChatKeyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserChatKeyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserChatKeys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserChatKeys.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserChatKeys
  **/
  _count?: true | UserChatKeyCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserChatKeyMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserChatKeyMaxAggregateInputType
}

export type GetUserChatKeyAggregateType<T extends UserChatKeyAggregateArgs> = {
      [P in keyof T & keyof AggregateUserChatKey]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserChatKey[P]>
    : Prisma.GetScalarType<T[P], AggregateUserChatKey[P]>
}




export type UserChatKeyGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserChatKeyWhereInput
  orderBy?: Prisma.UserChatKeyOrderByWithAggregationInput | Prisma.UserChatKeyOrderByWithAggregationInput[]
  by: Prisma.UserChatKeyScalarFieldEnum[] | Prisma.UserChatKeyScalarFieldEnum
  having?: Prisma.UserChatKeyScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserChatKeyCountAggregateInputType | true
  _min?: UserChatKeyMinAggregateInputType
  _max?: UserChatKeyMaxAggregateInputType
}

export type UserChatKeyGroupByOutputType = {
  userId: string
  chatId: string
  encryptedKey: string
  _count: UserChatKeyCountAggregateOutputType | null
  _min: UserChatKeyMinAggregateOutputType | null
  _max: UserChatKeyMaxAggregateOutputType | null
}

type GetUserChatKeyGroupByPayload<T extends UserChatKeyGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserChatKeyGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserChatKeyGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserChatKeyGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserChatKeyGroupByOutputType[P]>
      }
    >
  >



export type UserChatKeyWhereInput = {
  AND?: Prisma.UserChatKeyWhereInput | Prisma.UserChatKeyWhereInput[]
  OR?: Prisma.UserChatKeyWhereInput[]
  NOT?: Prisma.UserChatKeyWhereInput | Prisma.UserChatKeyWhereInput[]
  userId?: Prisma.StringFilter<"UserChatKey"> | string
  chatId?: Prisma.StringFilter<"UserChatKey"> | string
  encryptedKey?: Prisma.StringFilter<"UserChatKey"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type UserChatKeyOrderByWithRelationInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  encryptedKey?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type UserChatKeyWhereUniqueInput = Prisma.AtLeast<{
  userId_chatId?: Prisma.UserChatKeyUserIdChatIdCompoundUniqueInput
  AND?: Prisma.UserChatKeyWhereInput | Prisma.UserChatKeyWhereInput[]
  OR?: Prisma.UserChatKeyWhereInput[]
  NOT?: Prisma.UserChatKeyWhereInput | Prisma.UserChatKeyWhereInput[]
  userId?: Prisma.StringFilter<"UserChatKey"> | string
  chatId?: Prisma.StringFilter<"UserChatKey"> | string
  encryptedKey?: Prisma.StringFilter<"UserChatKey"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "userId_chatId">

export type UserChatKeyOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  encryptedKey?: Prisma.SortOrder
  _count?: Prisma.UserChatKeyCountOrderByAggregateInput
  _max?: Prisma.UserChatKeyMaxOrderByAggregateInput
  _min?: Prisma.UserChatKeyMinOrderByAggregateInput
}

export type UserChatKeyScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserChatKeyScalarWhereWithAggregatesInput | Prisma.UserChatKeyScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserChatKeyScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserChatKeyScalarWhereWithAggregatesInput | Prisma.UserChatKeyScalarWhereWithAggregatesInput[]
  userId?: Prisma.StringWithAggregatesFilter<"UserChatKey"> | string
  chatId?: Prisma.StringWithAggregatesFilter<"UserChatKey"> | string
  encryptedKey?: Prisma.StringWithAggregatesFilter<"UserChatKey"> | string
}

export type UserChatKeyCreateInput = {
  chatId: string
  encryptedKey: string
  user: Prisma.UserCreateNestedOneWithoutUserChatKeysInput
}

export type UserChatKeyUncheckedCreateInput = {
  userId: string
  chatId: string
  encryptedKey: string
}

export type UserChatKeyUpdateInput = {
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.UserUpdateOneRequiredWithoutUserChatKeysNestedInput
}

export type UserChatKeyUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserChatKeyCreateManyInput = {
  userId: string
  chatId: string
  encryptedKey: string
}

export type UserChatKeyUpdateManyMutationInput = {
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserChatKeyUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserChatKeyListRelationFilter = {
  every?: Prisma.UserChatKeyWhereInput
  some?: Prisma.UserChatKeyWhereInput
  none?: Prisma.UserChatKeyWhereInput
}

export type UserChatKeyOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserChatKeyUserIdChatIdCompoundUniqueInput = {
  userId: string
  chatId: string
}

export type UserChatKeyCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  encryptedKey?: Prisma.SortOrder
}

export type UserChatKeyMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  encryptedKey?: Prisma.SortOrder
}

export type UserChatKeyMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  encryptedKey?: Prisma.SortOrder
}

export type UserChatKeyCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserChatKeyCreateWithoutUserInput, Prisma.UserChatKeyUncheckedCreateWithoutUserInput> | Prisma.UserChatKeyCreateWithoutUserInput[] | Prisma.UserChatKeyUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserChatKeyCreateOrConnectWithoutUserInput | Prisma.UserChatKeyCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserChatKeyCreateManyUserInputEnvelope
  connect?: Prisma.UserChatKeyWhereUniqueInput | Prisma.UserChatKeyWhereUniqueInput[]
}

export type UserChatKeyUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserChatKeyCreateWithoutUserInput, Prisma.UserChatKeyUncheckedCreateWithoutUserInput> | Prisma.UserChatKeyCreateWithoutUserInput[] | Prisma.UserChatKeyUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserChatKeyCreateOrConnectWithoutUserInput | Prisma.UserChatKeyCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserChatKeyCreateManyUserInputEnvelope
  connect?: Prisma.UserChatKeyWhereUniqueInput | Prisma.UserChatKeyWhereUniqueInput[]
}

export type UserChatKeyUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserChatKeyCreateWithoutUserInput, Prisma.UserChatKeyUncheckedCreateWithoutUserInput> | Prisma.UserChatKeyCreateWithoutUserInput[] | Prisma.UserChatKeyUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserChatKeyCreateOrConnectWithoutUserInput | Prisma.UserChatKeyCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserChatKeyUpsertWithWhereUniqueWithoutUserInput | Prisma.UserChatKeyUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserChatKeyCreateManyUserInputEnvelope
  set?: Prisma.UserChatKeyWhereUniqueInput | Prisma.UserChatKeyWhereUniqueInput[]
  disconnect?: Prisma.UserChatKeyWhereUniqueInput | Prisma.UserChatKeyWhereUniqueInput[]
  delete?: Prisma.UserChatKeyWhereUniqueInput | Prisma.UserChatKeyWhereUniqueInput[]
  connect?: Prisma.UserChatKeyWhereUniqueInput | Prisma.UserChatKeyWhereUniqueInput[]
  update?: Prisma.UserChatKeyUpdateWithWhereUniqueWithoutUserInput | Prisma.UserChatKeyUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserChatKeyUpdateManyWithWhereWithoutUserInput | Prisma.UserChatKeyUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserChatKeyScalarWhereInput | Prisma.UserChatKeyScalarWhereInput[]
}

export type UserChatKeyUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserChatKeyCreateWithoutUserInput, Prisma.UserChatKeyUncheckedCreateWithoutUserInput> | Prisma.UserChatKeyCreateWithoutUserInput[] | Prisma.UserChatKeyUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserChatKeyCreateOrConnectWithoutUserInput | Prisma.UserChatKeyCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserChatKeyUpsertWithWhereUniqueWithoutUserInput | Prisma.UserChatKeyUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserChatKeyCreateManyUserInputEnvelope
  set?: Prisma.UserChatKeyWhereUniqueInput | Prisma.UserChatKeyWhereUniqueInput[]
  disconnect?: Prisma.UserChatKeyWhereUniqueInput | Prisma.UserChatKeyWhereUniqueInput[]
  delete?: Prisma.UserChatKeyWhereUniqueInput | Prisma.UserChatKeyWhereUniqueInput[]
  connect?: Prisma.UserChatKeyWhereUniqueInput | Prisma.UserChatKeyWhereUniqueInput[]
  update?: Prisma.UserChatKeyUpdateWithWhereUniqueWithoutUserInput | Prisma.UserChatKeyUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserChatKeyUpdateManyWithWhereWithoutUserInput | Prisma.UserChatKeyUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserChatKeyScalarWhereInput | Prisma.UserChatKeyScalarWhereInput[]
}

export type UserChatKeyCreateWithoutUserInput = {
  chatId: string
  encryptedKey: string
}

export type UserChatKeyUncheckedCreateWithoutUserInput = {
  chatId: string
  encryptedKey: string
}

export type UserChatKeyCreateOrConnectWithoutUserInput = {
  where: Prisma.UserChatKeyWhereUniqueInput
  create: Prisma.XOR<Prisma.UserChatKeyCreateWithoutUserInput, Prisma.UserChatKeyUncheckedCreateWithoutUserInput>
}

export type UserChatKeyCreateManyUserInputEnvelope = {
  data: Prisma.UserChatKeyCreateManyUserInput | Prisma.UserChatKeyCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UserChatKeyUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserChatKeyWhereUniqueInput
  update: Prisma.XOR<Prisma.UserChatKeyUpdateWithoutUserInput, Prisma.UserChatKeyUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserChatKeyCreateWithoutUserInput, Prisma.UserChatKeyUncheckedCreateWithoutUserInput>
}

export type UserChatKeyUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserChatKeyWhereUniqueInput
  data: Prisma.XOR<Prisma.UserChatKeyUpdateWithoutUserInput, Prisma.UserChatKeyUncheckedUpdateWithoutUserInput>
}

export type UserChatKeyUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserChatKeyScalarWhereInput
  data: Prisma.XOR<Prisma.UserChatKeyUpdateManyMutationInput, Prisma.UserChatKeyUncheckedUpdateManyWithoutUserInput>
}

export type UserChatKeyScalarWhereInput = {
  AND?: Prisma.UserChatKeyScalarWhereInput | Prisma.UserChatKeyScalarWhereInput[]
  OR?: Prisma.UserChatKeyScalarWhereInput[]
  NOT?: Prisma.UserChatKeyScalarWhereInput | Prisma.UserChatKeyScalarWhereInput[]
  userId?: Prisma.StringFilter<"UserChatKey"> | string
  chatId?: Prisma.StringFilter<"UserChatKey"> | string
  encryptedKey?: Prisma.StringFilter<"UserChatKey"> | string
}

export type UserChatKeyCreateManyUserInput = {
  chatId: string
  encryptedKey: string
}

export type UserChatKeyUpdateWithoutUserInput = {
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserChatKeyUncheckedUpdateWithoutUserInput = {
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserChatKeyUncheckedUpdateManyWithoutUserInput = {
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}



export type UserChatKeySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  chatId?: boolean
  encryptedKey?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userChatKey"]>

export type UserChatKeySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  chatId?: boolean
  encryptedKey?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userChatKey"]>

export type UserChatKeySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  chatId?: boolean
  encryptedKey?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userChatKey"]>

export type UserChatKeySelectScalar = {
  userId?: boolean
  chatId?: boolean
  encryptedKey?: boolean
}

export type UserChatKeyOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"userId" | "chatId" | "encryptedKey", ExtArgs["result"]["userChatKey"]>
export type UserChatKeyInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserChatKeyIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserChatKeyIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $UserChatKeyPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserChatKey"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    userId: string
    chatId: string
    encryptedKey: string
  }, ExtArgs["result"]["userChatKey"]>
  composites: {}
}

export type UserChatKeyGetPayload<S extends boolean | null | undefined | UserChatKeyDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserChatKeyPayload, S>

export type UserChatKeyCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserChatKeyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserChatKeyCountAggregateInputType | true
  }

export interface UserChatKeyDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserChatKey'], meta: { name: 'UserChatKey' } }
  /**
   * Find zero or one UserChatKey that matches the filter.
   * @param {UserChatKeyFindUniqueArgs} args - Arguments to find a UserChatKey
   * @example
   * // Get one UserChatKey
   * const userChatKey = await prisma.userChatKey.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserChatKeyFindUniqueArgs>(args: Prisma.SelectSubset<T, UserChatKeyFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserChatKeyClient<runtime.Types.Result.GetResult<Prisma.$UserChatKeyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserChatKey that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserChatKeyFindUniqueOrThrowArgs} args - Arguments to find a UserChatKey
   * @example
   * // Get one UserChatKey
   * const userChatKey = await prisma.userChatKey.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserChatKeyFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserChatKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserChatKeyClient<runtime.Types.Result.GetResult<Prisma.$UserChatKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserChatKey that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChatKeyFindFirstArgs} args - Arguments to find a UserChatKey
   * @example
   * // Get one UserChatKey
   * const userChatKey = await prisma.userChatKey.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserChatKeyFindFirstArgs>(args?: Prisma.SelectSubset<T, UserChatKeyFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserChatKeyClient<runtime.Types.Result.GetResult<Prisma.$UserChatKeyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserChatKey that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChatKeyFindFirstOrThrowArgs} args - Arguments to find a UserChatKey
   * @example
   * // Get one UserChatKey
   * const userChatKey = await prisma.userChatKey.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserChatKeyFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserChatKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserChatKeyClient<runtime.Types.Result.GetResult<Prisma.$UserChatKeyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserChatKeys that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChatKeyFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserChatKeys
   * const userChatKeys = await prisma.userChatKey.findMany()
   * 
   * // Get first 10 UserChatKeys
   * const userChatKeys = await prisma.userChatKey.findMany({ take: 10 })
   * 
   * // Only select the `userId`
   * const userChatKeyWithUserIdOnly = await prisma.userChatKey.findMany({ select: { userId: true } })
   * 
   */
  findMany<T extends UserChatKeyFindManyArgs>(args?: Prisma.SelectSubset<T, UserChatKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserChatKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserChatKey.
   * @param {UserChatKeyCreateArgs} args - Arguments to create a UserChatKey.
   * @example
   * // Create one UserChatKey
   * const UserChatKey = await prisma.userChatKey.create({
   *   data: {
   *     // ... data to create a UserChatKey
   *   }
   * })
   * 
   */
  create<T extends UserChatKeyCreateArgs>(args: Prisma.SelectSubset<T, UserChatKeyCreateArgs<ExtArgs>>): Prisma.Prisma__UserChatKeyClient<runtime.Types.Result.GetResult<Prisma.$UserChatKeyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserChatKeys.
   * @param {UserChatKeyCreateManyArgs} args - Arguments to create many UserChatKeys.
   * @example
   * // Create many UserChatKeys
   * const userChatKey = await prisma.userChatKey.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserChatKeyCreateManyArgs>(args?: Prisma.SelectSubset<T, UserChatKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserChatKeys and returns the data saved in the database.
   * @param {UserChatKeyCreateManyAndReturnArgs} args - Arguments to create many UserChatKeys.
   * @example
   * // Create many UserChatKeys
   * const userChatKey = await prisma.userChatKey.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserChatKeys and only return the `userId`
   * const userChatKeyWithUserIdOnly = await prisma.userChatKey.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserChatKeyCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserChatKeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserChatKeyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserChatKey.
   * @param {UserChatKeyDeleteArgs} args - Arguments to delete one UserChatKey.
   * @example
   * // Delete one UserChatKey
   * const UserChatKey = await prisma.userChatKey.delete({
   *   where: {
   *     // ... filter to delete one UserChatKey
   *   }
   * })
   * 
   */
  delete<T extends UserChatKeyDeleteArgs>(args: Prisma.SelectSubset<T, UserChatKeyDeleteArgs<ExtArgs>>): Prisma.Prisma__UserChatKeyClient<runtime.Types.Result.GetResult<Prisma.$UserChatKeyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserChatKey.
   * @param {UserChatKeyUpdateArgs} args - Arguments to update one UserChatKey.
   * @example
   * // Update one UserChatKey
   * const userChatKey = await prisma.userChatKey.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserChatKeyUpdateArgs>(args: Prisma.SelectSubset<T, UserChatKeyUpdateArgs<ExtArgs>>): Prisma.Prisma__UserChatKeyClient<runtime.Types.Result.GetResult<Prisma.$UserChatKeyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserChatKeys.
   * @param {UserChatKeyDeleteManyArgs} args - Arguments to filter UserChatKeys to delete.
   * @example
   * // Delete a few UserChatKeys
   * const { count } = await prisma.userChatKey.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserChatKeyDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserChatKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserChatKeys.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChatKeyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserChatKeys
   * const userChatKey = await prisma.userChatKey.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserChatKeyUpdateManyArgs>(args: Prisma.SelectSubset<T, UserChatKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserChatKeys and returns the data updated in the database.
   * @param {UserChatKeyUpdateManyAndReturnArgs} args - Arguments to update many UserChatKeys.
   * @example
   * // Update many UserChatKeys
   * const userChatKey = await prisma.userChatKey.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserChatKeys and only return the `userId`
   * const userChatKeyWithUserIdOnly = await prisma.userChatKey.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserChatKeyUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserChatKeyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserChatKeyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserChatKey.
   * @param {UserChatKeyUpsertArgs} args - Arguments to update or create a UserChatKey.
   * @example
   * // Update or create a UserChatKey
   * const userChatKey = await prisma.userChatKey.upsert({
   *   create: {
   *     // ... data to create a UserChatKey
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserChatKey we want to update
   *   }
   * })
   */
  upsert<T extends UserChatKeyUpsertArgs>(args: Prisma.SelectSubset<T, UserChatKeyUpsertArgs<ExtArgs>>): Prisma.Prisma__UserChatKeyClient<runtime.Types.Result.GetResult<Prisma.$UserChatKeyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserChatKeys.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChatKeyCountArgs} args - Arguments to filter UserChatKeys to count.
   * @example
   * // Count the number of UserChatKeys
   * const count = await prisma.userChatKey.count({
   *   where: {
   *     // ... the filter for the UserChatKeys we want to count
   *   }
   * })
  **/
  count<T extends UserChatKeyCountArgs>(
    args?: Prisma.Subset<T, UserChatKeyCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserChatKeyCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserChatKey.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChatKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserChatKeyAggregateArgs>(args: Prisma.Subset<T, UserChatKeyAggregateArgs>): Prisma.PrismaPromise<GetUserChatKeyAggregateType<T>>

  /**
   * Group by UserChatKey.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChatKeyGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserChatKeyGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserChatKeyGroupByArgs['orderBy'] }
      : { orderBy?: UserChatKeyGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserChatKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserChatKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserChatKey model
 */
readonly fields: UserChatKeyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserChatKey.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserChatKeyClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserChatKey model
 */
export interface UserChatKeyFieldRefs {
  readonly userId: Prisma.FieldRef<"UserChatKey", 'String'>
  readonly chatId: Prisma.FieldRef<"UserChatKey", 'String'>
  readonly encryptedKey: Prisma.FieldRef<"UserChatKey", 'String'>
}
    

// Custom InputTypes
/**
 * UserChatKey findUnique
 */
export type UserChatKeyFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKey
   */
  select?: Prisma.UserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKey
   */
  omit?: Prisma.UserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyInclude<ExtArgs> | null
  /**
   * Filter, which UserChatKey to fetch.
   */
  where: Prisma.UserChatKeyWhereUniqueInput
}

/**
 * UserChatKey findUniqueOrThrow
 */
export type UserChatKeyFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKey
   */
  select?: Prisma.UserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKey
   */
  omit?: Prisma.UserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyInclude<ExtArgs> | null
  /**
   * Filter, which UserChatKey to fetch.
   */
  where: Prisma.UserChatKeyWhereUniqueInput
}

/**
 * UserChatKey findFirst
 */
export type UserChatKeyFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKey
   */
  select?: Prisma.UserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKey
   */
  omit?: Prisma.UserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyInclude<ExtArgs> | null
  /**
   * Filter, which UserChatKey to fetch.
   */
  where?: Prisma.UserChatKeyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserChatKeys to fetch.
   */
  orderBy?: Prisma.UserChatKeyOrderByWithRelationInput | Prisma.UserChatKeyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserChatKeys.
   */
  cursor?: Prisma.UserChatKeyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserChatKeys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserChatKeys.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserChatKeys.
   */
  distinct?: Prisma.UserChatKeyScalarFieldEnum | Prisma.UserChatKeyScalarFieldEnum[]
}

/**
 * UserChatKey findFirstOrThrow
 */
export type UserChatKeyFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKey
   */
  select?: Prisma.UserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKey
   */
  omit?: Prisma.UserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyInclude<ExtArgs> | null
  /**
   * Filter, which UserChatKey to fetch.
   */
  where?: Prisma.UserChatKeyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserChatKeys to fetch.
   */
  orderBy?: Prisma.UserChatKeyOrderByWithRelationInput | Prisma.UserChatKeyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserChatKeys.
   */
  cursor?: Prisma.UserChatKeyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserChatKeys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserChatKeys.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserChatKeys.
   */
  distinct?: Prisma.UserChatKeyScalarFieldEnum | Prisma.UserChatKeyScalarFieldEnum[]
}

/**
 * UserChatKey findMany
 */
export type UserChatKeyFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKey
   */
  select?: Prisma.UserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKey
   */
  omit?: Prisma.UserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyInclude<ExtArgs> | null
  /**
   * Filter, which UserChatKeys to fetch.
   */
  where?: Prisma.UserChatKeyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserChatKeys to fetch.
   */
  orderBy?: Prisma.UserChatKeyOrderByWithRelationInput | Prisma.UserChatKeyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserChatKeys.
   */
  cursor?: Prisma.UserChatKeyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserChatKeys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserChatKeys.
   */
  skip?: number
  distinct?: Prisma.UserChatKeyScalarFieldEnum | Prisma.UserChatKeyScalarFieldEnum[]
}

/**
 * UserChatKey create
 */
export type UserChatKeyCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKey
   */
  select?: Prisma.UserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKey
   */
  omit?: Prisma.UserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyInclude<ExtArgs> | null
  /**
   * The data needed to create a UserChatKey.
   */
  data: Prisma.XOR<Prisma.UserChatKeyCreateInput, Prisma.UserChatKeyUncheckedCreateInput>
}

/**
 * UserChatKey createMany
 */
export type UserChatKeyCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserChatKeys.
   */
  data: Prisma.UserChatKeyCreateManyInput | Prisma.UserChatKeyCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserChatKey createManyAndReturn
 */
export type UserChatKeyCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKey
   */
  select?: Prisma.UserChatKeySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKey
   */
  omit?: Prisma.UserChatKeyOmit<ExtArgs> | null
  /**
   * The data used to create many UserChatKeys.
   */
  data: Prisma.UserChatKeyCreateManyInput | Prisma.UserChatKeyCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserChatKey update
 */
export type UserChatKeyUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKey
   */
  select?: Prisma.UserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKey
   */
  omit?: Prisma.UserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyInclude<ExtArgs> | null
  /**
   * The data needed to update a UserChatKey.
   */
  data: Prisma.XOR<Prisma.UserChatKeyUpdateInput, Prisma.UserChatKeyUncheckedUpdateInput>
  /**
   * Choose, which UserChatKey to update.
   */
  where: Prisma.UserChatKeyWhereUniqueInput
}

/**
 * UserChatKey updateMany
 */
export type UserChatKeyUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserChatKeys.
   */
  data: Prisma.XOR<Prisma.UserChatKeyUpdateManyMutationInput, Prisma.UserChatKeyUncheckedUpdateManyInput>
  /**
   * Filter which UserChatKeys to update
   */
  where?: Prisma.UserChatKeyWhereInput
  /**
   * Limit how many UserChatKeys to update.
   */
  limit?: number
}

/**
 * UserChatKey updateManyAndReturn
 */
export type UserChatKeyUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKey
   */
  select?: Prisma.UserChatKeySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKey
   */
  omit?: Prisma.UserChatKeyOmit<ExtArgs> | null
  /**
   * The data used to update UserChatKeys.
   */
  data: Prisma.XOR<Prisma.UserChatKeyUpdateManyMutationInput, Prisma.UserChatKeyUncheckedUpdateManyInput>
  /**
   * Filter which UserChatKeys to update
   */
  where?: Prisma.UserChatKeyWhereInput
  /**
   * Limit how many UserChatKeys to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserChatKey upsert
 */
export type UserChatKeyUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKey
   */
  select?: Prisma.UserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKey
   */
  omit?: Prisma.UserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyInclude<ExtArgs> | null
  /**
   * The filter to search for the UserChatKey to update in case it exists.
   */
  where: Prisma.UserChatKeyWhereUniqueInput
  /**
   * In case the UserChatKey found by the `where` argument doesn't exist, create a new UserChatKey with this data.
   */
  create: Prisma.XOR<Prisma.UserChatKeyCreateInput, Prisma.UserChatKeyUncheckedCreateInput>
  /**
   * In case the UserChatKey was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserChatKeyUpdateInput, Prisma.UserChatKeyUncheckedUpdateInput>
}

/**
 * UserChatKey delete
 */
export type UserChatKeyDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKey
   */
  select?: Prisma.UserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKey
   */
  omit?: Prisma.UserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyInclude<ExtArgs> | null
  /**
   * Filter which UserChatKey to delete.
   */
  where: Prisma.UserChatKeyWhereUniqueInput
}

/**
 * UserChatKey deleteMany
 */
export type UserChatKeyDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserChatKeys to delete
   */
  where?: Prisma.UserChatKeyWhereInput
  /**
   * Limit how many UserChatKeys to delete.
   */
  limit?: number
}

/**
 * UserChatKey without action
 */
export type UserChatKeyDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKey
   */
  select?: Prisma.UserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKey
   */
  omit?: Prisma.UserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyInclude<ExtArgs> | null
}
