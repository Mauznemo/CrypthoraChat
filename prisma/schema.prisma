// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  username     String        @unique
  displayName  String
  password     String
  profilePic   String? // path to encrypted blob
  profileIv    Bytes? //IV for decryption
  userChatKeys UserChatKey[] // encrypted keys for each chat
  createdAt    DateTime      @default(now())
  sessions     Session[]
  chats        Chat[]
  messages     Message[]
}

model UserChatKey {
  userId       String
  chatId       String
  encryptedKey Bytes
  user         User   @relation(fields: [userId], references: [id])

  @@id([userId, chatId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id           String    @id @default(uuid())
  name         String? // Group name, null for DM
  type         String // 'dm' or 'group'
  image        String? // path to encrypted blob
  imageIv      Bytes? //IV for decryption
  participants User[]
  messages     Message[]
  salt         Bytes // salt for encryption
}

model Message {
  id               String   @id @default(uuid())
  chatId           String
  senderId         String
  attachments      String[]
  reactions        String[]
  readBy           User[]
  encryptedContent Bytes // Encrypted message blob
  isEdited         Boolean  @default(false)
  timestamp        DateTime @default(now())
  chat             Chat     @relation(fields: [chatId], references: [id])
}
