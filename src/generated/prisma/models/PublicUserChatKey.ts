
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PublicUserChatKey` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PublicUserChatKey
 * 
 */
export type PublicUserChatKeyModel = runtime.Types.Result.DefaultSelection<Prisma.$PublicUserChatKeyPayload>

export type AggregatePublicUserChatKey = {
  _count: PublicUserChatKeyCountAggregateOutputType | null
  _min: PublicUserChatKeyMinAggregateOutputType | null
  _max: PublicUserChatKeyMaxAggregateOutputType | null
}

export type PublicUserChatKeyMinAggregateOutputType = {
  userId: string | null
  chatId: string | null
  encryptedKey: string | null
}

export type PublicUserChatKeyMaxAggregateOutputType = {
  userId: string | null
  chatId: string | null
  encryptedKey: string | null
}

export type PublicUserChatKeyCountAggregateOutputType = {
  userId: number
  chatId: number
  encryptedKey: number
  _all: number
}


export type PublicUserChatKeyMinAggregateInputType = {
  userId?: true
  chatId?: true
  encryptedKey?: true
}

export type PublicUserChatKeyMaxAggregateInputType = {
  userId?: true
  chatId?: true
  encryptedKey?: true
}

export type PublicUserChatKeyCountAggregateInputType = {
  userId?: true
  chatId?: true
  encryptedKey?: true
  _all?: true
}

export type PublicUserChatKeyAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PublicUserChatKey to aggregate.
   */
  where?: Prisma.PublicUserChatKeyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PublicUserChatKeys to fetch.
   */
  orderBy?: Prisma.PublicUserChatKeyOrderByWithRelationInput | Prisma.PublicUserChatKeyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PublicUserChatKeyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PublicUserChatKeys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PublicUserChatKeys.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PublicUserChatKeys
  **/
  _count?: true | PublicUserChatKeyCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PublicUserChatKeyMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PublicUserChatKeyMaxAggregateInputType
}

export type GetPublicUserChatKeyAggregateType<T extends PublicUserChatKeyAggregateArgs> = {
      [P in keyof T & keyof AggregatePublicUserChatKey]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePublicUserChatKey[P]>
    : Prisma.GetScalarType<T[P], AggregatePublicUserChatKey[P]>
}




export type PublicUserChatKeyGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PublicUserChatKeyWhereInput
  orderBy?: Prisma.PublicUserChatKeyOrderByWithAggregationInput | Prisma.PublicUserChatKeyOrderByWithAggregationInput[]
  by: Prisma.PublicUserChatKeyScalarFieldEnum[] | Prisma.PublicUserChatKeyScalarFieldEnum
  having?: Prisma.PublicUserChatKeyScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PublicUserChatKeyCountAggregateInputType | true
  _min?: PublicUserChatKeyMinAggregateInputType
  _max?: PublicUserChatKeyMaxAggregateInputType
}

export type PublicUserChatKeyGroupByOutputType = {
  userId: string
  chatId: string
  encryptedKey: string
  _count: PublicUserChatKeyCountAggregateOutputType | null
  _min: PublicUserChatKeyMinAggregateOutputType | null
  _max: PublicUserChatKeyMaxAggregateOutputType | null
}

type GetPublicUserChatKeyGroupByPayload<T extends PublicUserChatKeyGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PublicUserChatKeyGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PublicUserChatKeyGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PublicUserChatKeyGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PublicUserChatKeyGroupByOutputType[P]>
      }
    >
  >



export type PublicUserChatKeyWhereInput = {
  AND?: Prisma.PublicUserChatKeyWhereInput | Prisma.PublicUserChatKeyWhereInput[]
  OR?: Prisma.PublicUserChatKeyWhereInput[]
  NOT?: Prisma.PublicUserChatKeyWhereInput | Prisma.PublicUserChatKeyWhereInput[]
  userId?: Prisma.StringFilter<"PublicUserChatKey"> | string
  chatId?: Prisma.StringFilter<"PublicUserChatKey"> | string
  encryptedKey?: Prisma.StringFilter<"PublicUserChatKey"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  chat?: Prisma.XOR<Prisma.ChatScalarRelationFilter, Prisma.ChatWhereInput>
}

export type PublicUserChatKeyOrderByWithRelationInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  encryptedKey?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  chat?: Prisma.ChatOrderByWithRelationInput
}

export type PublicUserChatKeyWhereUniqueInput = Prisma.AtLeast<{
  userId_chatId?: Prisma.PublicUserChatKeyUserIdChatIdCompoundUniqueInput
  AND?: Prisma.PublicUserChatKeyWhereInput | Prisma.PublicUserChatKeyWhereInput[]
  OR?: Prisma.PublicUserChatKeyWhereInput[]
  NOT?: Prisma.PublicUserChatKeyWhereInput | Prisma.PublicUserChatKeyWhereInput[]
  userId?: Prisma.StringFilter<"PublicUserChatKey"> | string
  chatId?: Prisma.StringFilter<"PublicUserChatKey"> | string
  encryptedKey?: Prisma.StringFilter<"PublicUserChatKey"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  chat?: Prisma.XOR<Prisma.ChatScalarRelationFilter, Prisma.ChatWhereInput>
}, "userId_chatId">

export type PublicUserChatKeyOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  encryptedKey?: Prisma.SortOrder
  _count?: Prisma.PublicUserChatKeyCountOrderByAggregateInput
  _max?: Prisma.PublicUserChatKeyMaxOrderByAggregateInput
  _min?: Prisma.PublicUserChatKeyMinOrderByAggregateInput
}

export type PublicUserChatKeyScalarWhereWithAggregatesInput = {
  AND?: Prisma.PublicUserChatKeyScalarWhereWithAggregatesInput | Prisma.PublicUserChatKeyScalarWhereWithAggregatesInput[]
  OR?: Prisma.PublicUserChatKeyScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PublicUserChatKeyScalarWhereWithAggregatesInput | Prisma.PublicUserChatKeyScalarWhereWithAggregatesInput[]
  userId?: Prisma.StringWithAggregatesFilter<"PublicUserChatKey"> | string
  chatId?: Prisma.StringWithAggregatesFilter<"PublicUserChatKey"> | string
  encryptedKey?: Prisma.StringWithAggregatesFilter<"PublicUserChatKey"> | string
}

export type PublicUserChatKeyCreateInput = {
  encryptedKey: string
  user: Prisma.UserCreateNestedOneWithoutPublicUserChatKeysInput
  chat: Prisma.ChatCreateNestedOneWithoutPublicUserChatKeysInput
}

export type PublicUserChatKeyUncheckedCreateInput = {
  userId: string
  chatId: string
  encryptedKey: string
}

export type PublicUserChatKeyUpdateInput = {
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.UserUpdateOneRequiredWithoutPublicUserChatKeysNestedInput
  chat?: Prisma.ChatUpdateOneRequiredWithoutPublicUserChatKeysNestedInput
}

export type PublicUserChatKeyUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PublicUserChatKeyCreateManyInput = {
  userId: string
  chatId: string
  encryptedKey: string
}

export type PublicUserChatKeyUpdateManyMutationInput = {
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PublicUserChatKeyUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PublicUserChatKeyListRelationFilter = {
  every?: Prisma.PublicUserChatKeyWhereInput
  some?: Prisma.PublicUserChatKeyWhereInput
  none?: Prisma.PublicUserChatKeyWhereInput
}

export type PublicUserChatKeyOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PublicUserChatKeyUserIdChatIdCompoundUniqueInput = {
  userId: string
  chatId: string
}

export type PublicUserChatKeyCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  encryptedKey?: Prisma.SortOrder
}

export type PublicUserChatKeyMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  encryptedKey?: Prisma.SortOrder
}

export type PublicUserChatKeyMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  encryptedKey?: Prisma.SortOrder
}

export type PublicUserChatKeyCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PublicUserChatKeyCreateWithoutUserInput, Prisma.PublicUserChatKeyUncheckedCreateWithoutUserInput> | Prisma.PublicUserChatKeyCreateWithoutUserInput[] | Prisma.PublicUserChatKeyUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PublicUserChatKeyCreateOrConnectWithoutUserInput | Prisma.PublicUserChatKeyCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PublicUserChatKeyCreateManyUserInputEnvelope
  connect?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
}

export type PublicUserChatKeyUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PublicUserChatKeyCreateWithoutUserInput, Prisma.PublicUserChatKeyUncheckedCreateWithoutUserInput> | Prisma.PublicUserChatKeyCreateWithoutUserInput[] | Prisma.PublicUserChatKeyUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PublicUserChatKeyCreateOrConnectWithoutUserInput | Prisma.PublicUserChatKeyCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PublicUserChatKeyCreateManyUserInputEnvelope
  connect?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
}

export type PublicUserChatKeyUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PublicUserChatKeyCreateWithoutUserInput, Prisma.PublicUserChatKeyUncheckedCreateWithoutUserInput> | Prisma.PublicUserChatKeyCreateWithoutUserInput[] | Prisma.PublicUserChatKeyUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PublicUserChatKeyCreateOrConnectWithoutUserInput | Prisma.PublicUserChatKeyCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PublicUserChatKeyUpsertWithWhereUniqueWithoutUserInput | Prisma.PublicUserChatKeyUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PublicUserChatKeyCreateManyUserInputEnvelope
  set?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
  disconnect?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
  delete?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
  connect?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
  update?: Prisma.PublicUserChatKeyUpdateWithWhereUniqueWithoutUserInput | Prisma.PublicUserChatKeyUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PublicUserChatKeyUpdateManyWithWhereWithoutUserInput | Prisma.PublicUserChatKeyUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PublicUserChatKeyScalarWhereInput | Prisma.PublicUserChatKeyScalarWhereInput[]
}

export type PublicUserChatKeyUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PublicUserChatKeyCreateWithoutUserInput, Prisma.PublicUserChatKeyUncheckedCreateWithoutUserInput> | Prisma.PublicUserChatKeyCreateWithoutUserInput[] | Prisma.PublicUserChatKeyUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PublicUserChatKeyCreateOrConnectWithoutUserInput | Prisma.PublicUserChatKeyCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PublicUserChatKeyUpsertWithWhereUniqueWithoutUserInput | Prisma.PublicUserChatKeyUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PublicUserChatKeyCreateManyUserInputEnvelope
  set?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
  disconnect?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
  delete?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
  connect?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
  update?: Prisma.PublicUserChatKeyUpdateWithWhereUniqueWithoutUserInput | Prisma.PublicUserChatKeyUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PublicUserChatKeyUpdateManyWithWhereWithoutUserInput | Prisma.PublicUserChatKeyUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PublicUserChatKeyScalarWhereInput | Prisma.PublicUserChatKeyScalarWhereInput[]
}

export type PublicUserChatKeyCreateNestedManyWithoutChatInput = {
  create?: Prisma.XOR<Prisma.PublicUserChatKeyCreateWithoutChatInput, Prisma.PublicUserChatKeyUncheckedCreateWithoutChatInput> | Prisma.PublicUserChatKeyCreateWithoutChatInput[] | Prisma.PublicUserChatKeyUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.PublicUserChatKeyCreateOrConnectWithoutChatInput | Prisma.PublicUserChatKeyCreateOrConnectWithoutChatInput[]
  createMany?: Prisma.PublicUserChatKeyCreateManyChatInputEnvelope
  connect?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
}

export type PublicUserChatKeyUncheckedCreateNestedManyWithoutChatInput = {
  create?: Prisma.XOR<Prisma.PublicUserChatKeyCreateWithoutChatInput, Prisma.PublicUserChatKeyUncheckedCreateWithoutChatInput> | Prisma.PublicUserChatKeyCreateWithoutChatInput[] | Prisma.PublicUserChatKeyUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.PublicUserChatKeyCreateOrConnectWithoutChatInput | Prisma.PublicUserChatKeyCreateOrConnectWithoutChatInput[]
  createMany?: Prisma.PublicUserChatKeyCreateManyChatInputEnvelope
  connect?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
}

export type PublicUserChatKeyUpdateManyWithoutChatNestedInput = {
  create?: Prisma.XOR<Prisma.PublicUserChatKeyCreateWithoutChatInput, Prisma.PublicUserChatKeyUncheckedCreateWithoutChatInput> | Prisma.PublicUserChatKeyCreateWithoutChatInput[] | Prisma.PublicUserChatKeyUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.PublicUserChatKeyCreateOrConnectWithoutChatInput | Prisma.PublicUserChatKeyCreateOrConnectWithoutChatInput[]
  upsert?: Prisma.PublicUserChatKeyUpsertWithWhereUniqueWithoutChatInput | Prisma.PublicUserChatKeyUpsertWithWhereUniqueWithoutChatInput[]
  createMany?: Prisma.PublicUserChatKeyCreateManyChatInputEnvelope
  set?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
  disconnect?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
  delete?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
  connect?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
  update?: Prisma.PublicUserChatKeyUpdateWithWhereUniqueWithoutChatInput | Prisma.PublicUserChatKeyUpdateWithWhereUniqueWithoutChatInput[]
  updateMany?: Prisma.PublicUserChatKeyUpdateManyWithWhereWithoutChatInput | Prisma.PublicUserChatKeyUpdateManyWithWhereWithoutChatInput[]
  deleteMany?: Prisma.PublicUserChatKeyScalarWhereInput | Prisma.PublicUserChatKeyScalarWhereInput[]
}

export type PublicUserChatKeyUncheckedUpdateManyWithoutChatNestedInput = {
  create?: Prisma.XOR<Prisma.PublicUserChatKeyCreateWithoutChatInput, Prisma.PublicUserChatKeyUncheckedCreateWithoutChatInput> | Prisma.PublicUserChatKeyCreateWithoutChatInput[] | Prisma.PublicUserChatKeyUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.PublicUserChatKeyCreateOrConnectWithoutChatInput | Prisma.PublicUserChatKeyCreateOrConnectWithoutChatInput[]
  upsert?: Prisma.PublicUserChatKeyUpsertWithWhereUniqueWithoutChatInput | Prisma.PublicUserChatKeyUpsertWithWhereUniqueWithoutChatInput[]
  createMany?: Prisma.PublicUserChatKeyCreateManyChatInputEnvelope
  set?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
  disconnect?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
  delete?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
  connect?: Prisma.PublicUserChatKeyWhereUniqueInput | Prisma.PublicUserChatKeyWhereUniqueInput[]
  update?: Prisma.PublicUserChatKeyUpdateWithWhereUniqueWithoutChatInput | Prisma.PublicUserChatKeyUpdateWithWhereUniqueWithoutChatInput[]
  updateMany?: Prisma.PublicUserChatKeyUpdateManyWithWhereWithoutChatInput | Prisma.PublicUserChatKeyUpdateManyWithWhereWithoutChatInput[]
  deleteMany?: Prisma.PublicUserChatKeyScalarWhereInput | Prisma.PublicUserChatKeyScalarWhereInput[]
}

export type PublicUserChatKeyCreateWithoutUserInput = {
  encryptedKey: string
  chat: Prisma.ChatCreateNestedOneWithoutPublicUserChatKeysInput
}

export type PublicUserChatKeyUncheckedCreateWithoutUserInput = {
  chatId: string
  encryptedKey: string
}

export type PublicUserChatKeyCreateOrConnectWithoutUserInput = {
  where: Prisma.PublicUserChatKeyWhereUniqueInput
  create: Prisma.XOR<Prisma.PublicUserChatKeyCreateWithoutUserInput, Prisma.PublicUserChatKeyUncheckedCreateWithoutUserInput>
}

export type PublicUserChatKeyCreateManyUserInputEnvelope = {
  data: Prisma.PublicUserChatKeyCreateManyUserInput | Prisma.PublicUserChatKeyCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type PublicUserChatKeyUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.PublicUserChatKeyWhereUniqueInput
  update: Prisma.XOR<Prisma.PublicUserChatKeyUpdateWithoutUserInput, Prisma.PublicUserChatKeyUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.PublicUserChatKeyCreateWithoutUserInput, Prisma.PublicUserChatKeyUncheckedCreateWithoutUserInput>
}

export type PublicUserChatKeyUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.PublicUserChatKeyWhereUniqueInput
  data: Prisma.XOR<Prisma.PublicUserChatKeyUpdateWithoutUserInput, Prisma.PublicUserChatKeyUncheckedUpdateWithoutUserInput>
}

export type PublicUserChatKeyUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.PublicUserChatKeyScalarWhereInput
  data: Prisma.XOR<Prisma.PublicUserChatKeyUpdateManyMutationInput, Prisma.PublicUserChatKeyUncheckedUpdateManyWithoutUserInput>
}

export type PublicUserChatKeyScalarWhereInput = {
  AND?: Prisma.PublicUserChatKeyScalarWhereInput | Prisma.PublicUserChatKeyScalarWhereInput[]
  OR?: Prisma.PublicUserChatKeyScalarWhereInput[]
  NOT?: Prisma.PublicUserChatKeyScalarWhereInput | Prisma.PublicUserChatKeyScalarWhereInput[]
  userId?: Prisma.StringFilter<"PublicUserChatKey"> | string
  chatId?: Prisma.StringFilter<"PublicUserChatKey"> | string
  encryptedKey?: Prisma.StringFilter<"PublicUserChatKey"> | string
}

export type PublicUserChatKeyCreateWithoutChatInput = {
  encryptedKey: string
  user: Prisma.UserCreateNestedOneWithoutPublicUserChatKeysInput
}

export type PublicUserChatKeyUncheckedCreateWithoutChatInput = {
  userId: string
  encryptedKey: string
}

export type PublicUserChatKeyCreateOrConnectWithoutChatInput = {
  where: Prisma.PublicUserChatKeyWhereUniqueInput
  create: Prisma.XOR<Prisma.PublicUserChatKeyCreateWithoutChatInput, Prisma.PublicUserChatKeyUncheckedCreateWithoutChatInput>
}

export type PublicUserChatKeyCreateManyChatInputEnvelope = {
  data: Prisma.PublicUserChatKeyCreateManyChatInput | Prisma.PublicUserChatKeyCreateManyChatInput[]
  skipDuplicates?: boolean
}

export type PublicUserChatKeyUpsertWithWhereUniqueWithoutChatInput = {
  where: Prisma.PublicUserChatKeyWhereUniqueInput
  update: Prisma.XOR<Prisma.PublicUserChatKeyUpdateWithoutChatInput, Prisma.PublicUserChatKeyUncheckedUpdateWithoutChatInput>
  create: Prisma.XOR<Prisma.PublicUserChatKeyCreateWithoutChatInput, Prisma.PublicUserChatKeyUncheckedCreateWithoutChatInput>
}

export type PublicUserChatKeyUpdateWithWhereUniqueWithoutChatInput = {
  where: Prisma.PublicUserChatKeyWhereUniqueInput
  data: Prisma.XOR<Prisma.PublicUserChatKeyUpdateWithoutChatInput, Prisma.PublicUserChatKeyUncheckedUpdateWithoutChatInput>
}

export type PublicUserChatKeyUpdateManyWithWhereWithoutChatInput = {
  where: Prisma.PublicUserChatKeyScalarWhereInput
  data: Prisma.XOR<Prisma.PublicUserChatKeyUpdateManyMutationInput, Prisma.PublicUserChatKeyUncheckedUpdateManyWithoutChatInput>
}

export type PublicUserChatKeyCreateManyUserInput = {
  chatId: string
  encryptedKey: string
}

export type PublicUserChatKeyUpdateWithoutUserInput = {
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
  chat?: Prisma.ChatUpdateOneRequiredWithoutPublicUserChatKeysNestedInput
}

export type PublicUserChatKeyUncheckedUpdateWithoutUserInput = {
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PublicUserChatKeyUncheckedUpdateManyWithoutUserInput = {
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PublicUserChatKeyCreateManyChatInput = {
  userId: string
  encryptedKey: string
}

export type PublicUserChatKeyUpdateWithoutChatInput = {
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.UserUpdateOneRequiredWithoutPublicUserChatKeysNestedInput
}

export type PublicUserChatKeyUncheckedUpdateWithoutChatInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PublicUserChatKeyUncheckedUpdateManyWithoutChatInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}



export type PublicUserChatKeySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  chatId?: boolean
  encryptedKey?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}, ExtArgs["result"]["publicUserChatKey"]>

export type PublicUserChatKeySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  chatId?: boolean
  encryptedKey?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}, ExtArgs["result"]["publicUserChatKey"]>

export type PublicUserChatKeySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  chatId?: boolean
  encryptedKey?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}, ExtArgs["result"]["publicUserChatKey"]>

export type PublicUserChatKeySelectScalar = {
  userId?: boolean
  chatId?: boolean
  encryptedKey?: boolean
}

export type PublicUserChatKeyOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"userId" | "chatId" | "encryptedKey", ExtArgs["result"]["publicUserChatKey"]>
export type PublicUserChatKeyInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}
export type PublicUserChatKeyIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}
export type PublicUserChatKeyIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}

export type $PublicUserChatKeyPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PublicUserChatKey"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    chat: Prisma.$ChatPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    userId: string
    chatId: string
    encryptedKey: string
  }, ExtArgs["result"]["publicUserChatKey"]>
  composites: {}
}

export type PublicUserChatKeyGetPayload<S extends boolean | null | undefined | PublicUserChatKeyDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PublicUserChatKeyPayload, S>

export type PublicUserChatKeyCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PublicUserChatKeyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PublicUserChatKeyCountAggregateInputType | true
  }

export interface PublicUserChatKeyDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PublicUserChatKey'], meta: { name: 'PublicUserChatKey' } }
  /**
   * Find zero or one PublicUserChatKey that matches the filter.
   * @param {PublicUserChatKeyFindUniqueArgs} args - Arguments to find a PublicUserChatKey
   * @example
   * // Get one PublicUserChatKey
   * const publicUserChatKey = await prisma.publicUserChatKey.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PublicUserChatKeyFindUniqueArgs>(args: Prisma.SelectSubset<T, PublicUserChatKeyFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PublicUserChatKeyClient<runtime.Types.Result.GetResult<Prisma.$PublicUserChatKeyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PublicUserChatKey that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PublicUserChatKeyFindUniqueOrThrowArgs} args - Arguments to find a PublicUserChatKey
   * @example
   * // Get one PublicUserChatKey
   * const publicUserChatKey = await prisma.publicUserChatKey.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PublicUserChatKeyFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PublicUserChatKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PublicUserChatKeyClient<runtime.Types.Result.GetResult<Prisma.$PublicUserChatKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PublicUserChatKey that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PublicUserChatKeyFindFirstArgs} args - Arguments to find a PublicUserChatKey
   * @example
   * // Get one PublicUserChatKey
   * const publicUserChatKey = await prisma.publicUserChatKey.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PublicUserChatKeyFindFirstArgs>(args?: Prisma.SelectSubset<T, PublicUserChatKeyFindFirstArgs<ExtArgs>>): Prisma.Prisma__PublicUserChatKeyClient<runtime.Types.Result.GetResult<Prisma.$PublicUserChatKeyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PublicUserChatKey that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PublicUserChatKeyFindFirstOrThrowArgs} args - Arguments to find a PublicUserChatKey
   * @example
   * // Get one PublicUserChatKey
   * const publicUserChatKey = await prisma.publicUserChatKey.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PublicUserChatKeyFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PublicUserChatKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PublicUserChatKeyClient<runtime.Types.Result.GetResult<Prisma.$PublicUserChatKeyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PublicUserChatKeys that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PublicUserChatKeyFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PublicUserChatKeys
   * const publicUserChatKeys = await prisma.publicUserChatKey.findMany()
   * 
   * // Get first 10 PublicUserChatKeys
   * const publicUserChatKeys = await prisma.publicUserChatKey.findMany({ take: 10 })
   * 
   * // Only select the `userId`
   * const publicUserChatKeyWithUserIdOnly = await prisma.publicUserChatKey.findMany({ select: { userId: true } })
   * 
   */
  findMany<T extends PublicUserChatKeyFindManyArgs>(args?: Prisma.SelectSubset<T, PublicUserChatKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PublicUserChatKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PublicUserChatKey.
   * @param {PublicUserChatKeyCreateArgs} args - Arguments to create a PublicUserChatKey.
   * @example
   * // Create one PublicUserChatKey
   * const PublicUserChatKey = await prisma.publicUserChatKey.create({
   *   data: {
   *     // ... data to create a PublicUserChatKey
   *   }
   * })
   * 
   */
  create<T extends PublicUserChatKeyCreateArgs>(args: Prisma.SelectSubset<T, PublicUserChatKeyCreateArgs<ExtArgs>>): Prisma.Prisma__PublicUserChatKeyClient<runtime.Types.Result.GetResult<Prisma.$PublicUserChatKeyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PublicUserChatKeys.
   * @param {PublicUserChatKeyCreateManyArgs} args - Arguments to create many PublicUserChatKeys.
   * @example
   * // Create many PublicUserChatKeys
   * const publicUserChatKey = await prisma.publicUserChatKey.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PublicUserChatKeyCreateManyArgs>(args?: Prisma.SelectSubset<T, PublicUserChatKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PublicUserChatKeys and returns the data saved in the database.
   * @param {PublicUserChatKeyCreateManyAndReturnArgs} args - Arguments to create many PublicUserChatKeys.
   * @example
   * // Create many PublicUserChatKeys
   * const publicUserChatKey = await prisma.publicUserChatKey.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PublicUserChatKeys and only return the `userId`
   * const publicUserChatKeyWithUserIdOnly = await prisma.publicUserChatKey.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PublicUserChatKeyCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PublicUserChatKeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PublicUserChatKeyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PublicUserChatKey.
   * @param {PublicUserChatKeyDeleteArgs} args - Arguments to delete one PublicUserChatKey.
   * @example
   * // Delete one PublicUserChatKey
   * const PublicUserChatKey = await prisma.publicUserChatKey.delete({
   *   where: {
   *     // ... filter to delete one PublicUserChatKey
   *   }
   * })
   * 
   */
  delete<T extends PublicUserChatKeyDeleteArgs>(args: Prisma.SelectSubset<T, PublicUserChatKeyDeleteArgs<ExtArgs>>): Prisma.Prisma__PublicUserChatKeyClient<runtime.Types.Result.GetResult<Prisma.$PublicUserChatKeyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PublicUserChatKey.
   * @param {PublicUserChatKeyUpdateArgs} args - Arguments to update one PublicUserChatKey.
   * @example
   * // Update one PublicUserChatKey
   * const publicUserChatKey = await prisma.publicUserChatKey.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PublicUserChatKeyUpdateArgs>(args: Prisma.SelectSubset<T, PublicUserChatKeyUpdateArgs<ExtArgs>>): Prisma.Prisma__PublicUserChatKeyClient<runtime.Types.Result.GetResult<Prisma.$PublicUserChatKeyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PublicUserChatKeys.
   * @param {PublicUserChatKeyDeleteManyArgs} args - Arguments to filter PublicUserChatKeys to delete.
   * @example
   * // Delete a few PublicUserChatKeys
   * const { count } = await prisma.publicUserChatKey.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PublicUserChatKeyDeleteManyArgs>(args?: Prisma.SelectSubset<T, PublicUserChatKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PublicUserChatKeys.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PublicUserChatKeyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PublicUserChatKeys
   * const publicUserChatKey = await prisma.publicUserChatKey.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PublicUserChatKeyUpdateManyArgs>(args: Prisma.SelectSubset<T, PublicUserChatKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PublicUserChatKeys and returns the data updated in the database.
   * @param {PublicUserChatKeyUpdateManyAndReturnArgs} args - Arguments to update many PublicUserChatKeys.
   * @example
   * // Update many PublicUserChatKeys
   * const publicUserChatKey = await prisma.publicUserChatKey.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PublicUserChatKeys and only return the `userId`
   * const publicUserChatKeyWithUserIdOnly = await prisma.publicUserChatKey.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PublicUserChatKeyUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PublicUserChatKeyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PublicUserChatKeyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PublicUserChatKey.
   * @param {PublicUserChatKeyUpsertArgs} args - Arguments to update or create a PublicUserChatKey.
   * @example
   * // Update or create a PublicUserChatKey
   * const publicUserChatKey = await prisma.publicUserChatKey.upsert({
   *   create: {
   *     // ... data to create a PublicUserChatKey
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PublicUserChatKey we want to update
   *   }
   * })
   */
  upsert<T extends PublicUserChatKeyUpsertArgs>(args: Prisma.SelectSubset<T, PublicUserChatKeyUpsertArgs<ExtArgs>>): Prisma.Prisma__PublicUserChatKeyClient<runtime.Types.Result.GetResult<Prisma.$PublicUserChatKeyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PublicUserChatKeys.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PublicUserChatKeyCountArgs} args - Arguments to filter PublicUserChatKeys to count.
   * @example
   * // Count the number of PublicUserChatKeys
   * const count = await prisma.publicUserChatKey.count({
   *   where: {
   *     // ... the filter for the PublicUserChatKeys we want to count
   *   }
   * })
  **/
  count<T extends PublicUserChatKeyCountArgs>(
    args?: Prisma.Subset<T, PublicUserChatKeyCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PublicUserChatKeyCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PublicUserChatKey.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PublicUserChatKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PublicUserChatKeyAggregateArgs>(args: Prisma.Subset<T, PublicUserChatKeyAggregateArgs>): Prisma.PrismaPromise<GetPublicUserChatKeyAggregateType<T>>

  /**
   * Group by PublicUserChatKey.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PublicUserChatKeyGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PublicUserChatKeyGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PublicUserChatKeyGroupByArgs['orderBy'] }
      : { orderBy?: PublicUserChatKeyGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PublicUserChatKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPublicUserChatKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PublicUserChatKey model
 */
readonly fields: PublicUserChatKeyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PublicUserChatKey.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PublicUserChatKeyClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  chat<T extends Prisma.ChatDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatDefaultArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PublicUserChatKey model
 */
export interface PublicUserChatKeyFieldRefs {
  readonly userId: Prisma.FieldRef<"PublicUserChatKey", 'String'>
  readonly chatId: Prisma.FieldRef<"PublicUserChatKey", 'String'>
  readonly encryptedKey: Prisma.FieldRef<"PublicUserChatKey", 'String'>
}
    

// Custom InputTypes
/**
 * PublicUserChatKey findUnique
 */
export type PublicUserChatKeyFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublicUserChatKey
   */
  select?: Prisma.PublicUserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublicUserChatKey
   */
  omit?: Prisma.PublicUserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublicUserChatKeyInclude<ExtArgs> | null
  /**
   * Filter, which PublicUserChatKey to fetch.
   */
  where: Prisma.PublicUserChatKeyWhereUniqueInput
}

/**
 * PublicUserChatKey findUniqueOrThrow
 */
export type PublicUserChatKeyFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublicUserChatKey
   */
  select?: Prisma.PublicUserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublicUserChatKey
   */
  omit?: Prisma.PublicUserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublicUserChatKeyInclude<ExtArgs> | null
  /**
   * Filter, which PublicUserChatKey to fetch.
   */
  where: Prisma.PublicUserChatKeyWhereUniqueInput
}

/**
 * PublicUserChatKey findFirst
 */
export type PublicUserChatKeyFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublicUserChatKey
   */
  select?: Prisma.PublicUserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublicUserChatKey
   */
  omit?: Prisma.PublicUserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublicUserChatKeyInclude<ExtArgs> | null
  /**
   * Filter, which PublicUserChatKey to fetch.
   */
  where?: Prisma.PublicUserChatKeyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PublicUserChatKeys to fetch.
   */
  orderBy?: Prisma.PublicUserChatKeyOrderByWithRelationInput | Prisma.PublicUserChatKeyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PublicUserChatKeys.
   */
  cursor?: Prisma.PublicUserChatKeyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PublicUserChatKeys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PublicUserChatKeys.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PublicUserChatKeys.
   */
  distinct?: Prisma.PublicUserChatKeyScalarFieldEnum | Prisma.PublicUserChatKeyScalarFieldEnum[]
}

/**
 * PublicUserChatKey findFirstOrThrow
 */
export type PublicUserChatKeyFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublicUserChatKey
   */
  select?: Prisma.PublicUserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublicUserChatKey
   */
  omit?: Prisma.PublicUserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublicUserChatKeyInclude<ExtArgs> | null
  /**
   * Filter, which PublicUserChatKey to fetch.
   */
  where?: Prisma.PublicUserChatKeyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PublicUserChatKeys to fetch.
   */
  orderBy?: Prisma.PublicUserChatKeyOrderByWithRelationInput | Prisma.PublicUserChatKeyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PublicUserChatKeys.
   */
  cursor?: Prisma.PublicUserChatKeyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PublicUserChatKeys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PublicUserChatKeys.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PublicUserChatKeys.
   */
  distinct?: Prisma.PublicUserChatKeyScalarFieldEnum | Prisma.PublicUserChatKeyScalarFieldEnum[]
}

/**
 * PublicUserChatKey findMany
 */
export type PublicUserChatKeyFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublicUserChatKey
   */
  select?: Prisma.PublicUserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublicUserChatKey
   */
  omit?: Prisma.PublicUserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublicUserChatKeyInclude<ExtArgs> | null
  /**
   * Filter, which PublicUserChatKeys to fetch.
   */
  where?: Prisma.PublicUserChatKeyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PublicUserChatKeys to fetch.
   */
  orderBy?: Prisma.PublicUserChatKeyOrderByWithRelationInput | Prisma.PublicUserChatKeyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PublicUserChatKeys.
   */
  cursor?: Prisma.PublicUserChatKeyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PublicUserChatKeys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PublicUserChatKeys.
   */
  skip?: number
  distinct?: Prisma.PublicUserChatKeyScalarFieldEnum | Prisma.PublicUserChatKeyScalarFieldEnum[]
}

/**
 * PublicUserChatKey create
 */
export type PublicUserChatKeyCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublicUserChatKey
   */
  select?: Prisma.PublicUserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublicUserChatKey
   */
  omit?: Prisma.PublicUserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublicUserChatKeyInclude<ExtArgs> | null
  /**
   * The data needed to create a PublicUserChatKey.
   */
  data: Prisma.XOR<Prisma.PublicUserChatKeyCreateInput, Prisma.PublicUserChatKeyUncheckedCreateInput>
}

/**
 * PublicUserChatKey createMany
 */
export type PublicUserChatKeyCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PublicUserChatKeys.
   */
  data: Prisma.PublicUserChatKeyCreateManyInput | Prisma.PublicUserChatKeyCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PublicUserChatKey createManyAndReturn
 */
export type PublicUserChatKeyCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublicUserChatKey
   */
  select?: Prisma.PublicUserChatKeySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PublicUserChatKey
   */
  omit?: Prisma.PublicUserChatKeyOmit<ExtArgs> | null
  /**
   * The data used to create many PublicUserChatKeys.
   */
  data: Prisma.PublicUserChatKeyCreateManyInput | Prisma.PublicUserChatKeyCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublicUserChatKeyIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PublicUserChatKey update
 */
export type PublicUserChatKeyUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublicUserChatKey
   */
  select?: Prisma.PublicUserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublicUserChatKey
   */
  omit?: Prisma.PublicUserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublicUserChatKeyInclude<ExtArgs> | null
  /**
   * The data needed to update a PublicUserChatKey.
   */
  data: Prisma.XOR<Prisma.PublicUserChatKeyUpdateInput, Prisma.PublicUserChatKeyUncheckedUpdateInput>
  /**
   * Choose, which PublicUserChatKey to update.
   */
  where: Prisma.PublicUserChatKeyWhereUniqueInput
}

/**
 * PublicUserChatKey updateMany
 */
export type PublicUserChatKeyUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PublicUserChatKeys.
   */
  data: Prisma.XOR<Prisma.PublicUserChatKeyUpdateManyMutationInput, Prisma.PublicUserChatKeyUncheckedUpdateManyInput>
  /**
   * Filter which PublicUserChatKeys to update
   */
  where?: Prisma.PublicUserChatKeyWhereInput
  /**
   * Limit how many PublicUserChatKeys to update.
   */
  limit?: number
}

/**
 * PublicUserChatKey updateManyAndReturn
 */
export type PublicUserChatKeyUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublicUserChatKey
   */
  select?: Prisma.PublicUserChatKeySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PublicUserChatKey
   */
  omit?: Prisma.PublicUserChatKeyOmit<ExtArgs> | null
  /**
   * The data used to update PublicUserChatKeys.
   */
  data: Prisma.XOR<Prisma.PublicUserChatKeyUpdateManyMutationInput, Prisma.PublicUserChatKeyUncheckedUpdateManyInput>
  /**
   * Filter which PublicUserChatKeys to update
   */
  where?: Prisma.PublicUserChatKeyWhereInput
  /**
   * Limit how many PublicUserChatKeys to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublicUserChatKeyIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PublicUserChatKey upsert
 */
export type PublicUserChatKeyUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublicUserChatKey
   */
  select?: Prisma.PublicUserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublicUserChatKey
   */
  omit?: Prisma.PublicUserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublicUserChatKeyInclude<ExtArgs> | null
  /**
   * The filter to search for the PublicUserChatKey to update in case it exists.
   */
  where: Prisma.PublicUserChatKeyWhereUniqueInput
  /**
   * In case the PublicUserChatKey found by the `where` argument doesn't exist, create a new PublicUserChatKey with this data.
   */
  create: Prisma.XOR<Prisma.PublicUserChatKeyCreateInput, Prisma.PublicUserChatKeyUncheckedCreateInput>
  /**
   * In case the PublicUserChatKey was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PublicUserChatKeyUpdateInput, Prisma.PublicUserChatKeyUncheckedUpdateInput>
}

/**
 * PublicUserChatKey delete
 */
export type PublicUserChatKeyDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublicUserChatKey
   */
  select?: Prisma.PublicUserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublicUserChatKey
   */
  omit?: Prisma.PublicUserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublicUserChatKeyInclude<ExtArgs> | null
  /**
   * Filter which PublicUserChatKey to delete.
   */
  where: Prisma.PublicUserChatKeyWhereUniqueInput
}

/**
 * PublicUserChatKey deleteMany
 */
export type PublicUserChatKeyDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PublicUserChatKeys to delete
   */
  where?: Prisma.PublicUserChatKeyWhereInput
  /**
   * Limit how many PublicUserChatKeys to delete.
   */
  limit?: number
}

/**
 * PublicUserChatKey without action
 */
export type PublicUserChatKeyDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublicUserChatKey
   */
  select?: Prisma.PublicUserChatKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublicUserChatKey
   */
  omit?: Prisma.PublicUserChatKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublicUserChatKeyInclude<ExtArgs> | null
}
