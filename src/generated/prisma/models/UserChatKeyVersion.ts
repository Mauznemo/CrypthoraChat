
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UserChatKeyVersion` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UserChatKeyVersion
 * 
 */
export type UserChatKeyVersionModel = runtime.Types.Result.DefaultSelection<Prisma.$UserChatKeyVersionPayload>

export type AggregateUserChatKeyVersion = {
  _count: UserChatKeyVersionCountAggregateOutputType | null
  _avg: UserChatKeyVersionAvgAggregateOutputType | null
  _sum: UserChatKeyVersionSumAggregateOutputType | null
  _min: UserChatKeyVersionMinAggregateOutputType | null
  _max: UserChatKeyVersionMaxAggregateOutputType | null
}

export type UserChatKeyVersionAvgAggregateOutputType = {
  keyVersion: number | null
}

export type UserChatKeyVersionSumAggregateOutputType = {
  keyVersion: number | null
}

export type UserChatKeyVersionMinAggregateOutputType = {
  userId: string | null
  chatId: string | null
  keyVersion: number | null
  encryptedKey: string | null
}

export type UserChatKeyVersionMaxAggregateOutputType = {
  userId: string | null
  chatId: string | null
  keyVersion: number | null
  encryptedKey: string | null
}

export type UserChatKeyVersionCountAggregateOutputType = {
  userId: number
  chatId: number
  keyVersion: number
  encryptedKey: number
  _all: number
}


export type UserChatKeyVersionAvgAggregateInputType = {
  keyVersion?: true
}

export type UserChatKeyVersionSumAggregateInputType = {
  keyVersion?: true
}

export type UserChatKeyVersionMinAggregateInputType = {
  userId?: true
  chatId?: true
  keyVersion?: true
  encryptedKey?: true
}

export type UserChatKeyVersionMaxAggregateInputType = {
  userId?: true
  chatId?: true
  keyVersion?: true
  encryptedKey?: true
}

export type UserChatKeyVersionCountAggregateInputType = {
  userId?: true
  chatId?: true
  keyVersion?: true
  encryptedKey?: true
  _all?: true
}

export type UserChatKeyVersionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserChatKeyVersion to aggregate.
   */
  where?: Prisma.UserChatKeyVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserChatKeyVersions to fetch.
   */
  orderBy?: Prisma.UserChatKeyVersionOrderByWithRelationInput | Prisma.UserChatKeyVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserChatKeyVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserChatKeyVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserChatKeyVersions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserChatKeyVersions
  **/
  _count?: true | UserChatKeyVersionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UserChatKeyVersionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UserChatKeyVersionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserChatKeyVersionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserChatKeyVersionMaxAggregateInputType
}

export type GetUserChatKeyVersionAggregateType<T extends UserChatKeyVersionAggregateArgs> = {
      [P in keyof T & keyof AggregateUserChatKeyVersion]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserChatKeyVersion[P]>
    : Prisma.GetScalarType<T[P], AggregateUserChatKeyVersion[P]>
}




export type UserChatKeyVersionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserChatKeyVersionWhereInput
  orderBy?: Prisma.UserChatKeyVersionOrderByWithAggregationInput | Prisma.UserChatKeyVersionOrderByWithAggregationInput[]
  by: Prisma.UserChatKeyVersionScalarFieldEnum[] | Prisma.UserChatKeyVersionScalarFieldEnum
  having?: Prisma.UserChatKeyVersionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserChatKeyVersionCountAggregateInputType | true
  _avg?: UserChatKeyVersionAvgAggregateInputType
  _sum?: UserChatKeyVersionSumAggregateInputType
  _min?: UserChatKeyVersionMinAggregateInputType
  _max?: UserChatKeyVersionMaxAggregateInputType
}

export type UserChatKeyVersionGroupByOutputType = {
  userId: string
  chatId: string
  keyVersion: number
  encryptedKey: string
  _count: UserChatKeyVersionCountAggregateOutputType | null
  _avg: UserChatKeyVersionAvgAggregateOutputType | null
  _sum: UserChatKeyVersionSumAggregateOutputType | null
  _min: UserChatKeyVersionMinAggregateOutputType | null
  _max: UserChatKeyVersionMaxAggregateOutputType | null
}

type GetUserChatKeyVersionGroupByPayload<T extends UserChatKeyVersionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserChatKeyVersionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserChatKeyVersionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserChatKeyVersionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserChatKeyVersionGroupByOutputType[P]>
      }
    >
  >



export type UserChatKeyVersionWhereInput = {
  AND?: Prisma.UserChatKeyVersionWhereInput | Prisma.UserChatKeyVersionWhereInput[]
  OR?: Prisma.UserChatKeyVersionWhereInput[]
  NOT?: Prisma.UserChatKeyVersionWhereInput | Prisma.UserChatKeyVersionWhereInput[]
  userId?: Prisma.StringFilter<"UserChatKeyVersion"> | string
  chatId?: Prisma.StringFilter<"UserChatKeyVersion"> | string
  keyVersion?: Prisma.IntFilter<"UserChatKeyVersion"> | number
  encryptedKey?: Prisma.StringFilter<"UserChatKeyVersion"> | string
  userChatKey?: Prisma.XOR<Prisma.UserChatKeyScalarRelationFilter, Prisma.UserChatKeyWhereInput>
}

export type UserChatKeyVersionOrderByWithRelationInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  keyVersion?: Prisma.SortOrder
  encryptedKey?: Prisma.SortOrder
  userChatKey?: Prisma.UserChatKeyOrderByWithRelationInput
}

export type UserChatKeyVersionWhereUniqueInput = Prisma.AtLeast<{
  userId_chatId_keyVersion?: Prisma.UserChatKeyVersionUserIdChatIdKeyVersionCompoundUniqueInput
  AND?: Prisma.UserChatKeyVersionWhereInput | Prisma.UserChatKeyVersionWhereInput[]
  OR?: Prisma.UserChatKeyVersionWhereInput[]
  NOT?: Prisma.UserChatKeyVersionWhereInput | Prisma.UserChatKeyVersionWhereInput[]
  userId?: Prisma.StringFilter<"UserChatKeyVersion"> | string
  chatId?: Prisma.StringFilter<"UserChatKeyVersion"> | string
  keyVersion?: Prisma.IntFilter<"UserChatKeyVersion"> | number
  encryptedKey?: Prisma.StringFilter<"UserChatKeyVersion"> | string
  userChatKey?: Prisma.XOR<Prisma.UserChatKeyScalarRelationFilter, Prisma.UserChatKeyWhereInput>
}, "userId_chatId_keyVersion">

export type UserChatKeyVersionOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  keyVersion?: Prisma.SortOrder
  encryptedKey?: Prisma.SortOrder
  _count?: Prisma.UserChatKeyVersionCountOrderByAggregateInput
  _avg?: Prisma.UserChatKeyVersionAvgOrderByAggregateInput
  _max?: Prisma.UserChatKeyVersionMaxOrderByAggregateInput
  _min?: Prisma.UserChatKeyVersionMinOrderByAggregateInput
  _sum?: Prisma.UserChatKeyVersionSumOrderByAggregateInput
}

export type UserChatKeyVersionScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserChatKeyVersionScalarWhereWithAggregatesInput | Prisma.UserChatKeyVersionScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserChatKeyVersionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserChatKeyVersionScalarWhereWithAggregatesInput | Prisma.UserChatKeyVersionScalarWhereWithAggregatesInput[]
  userId?: Prisma.StringWithAggregatesFilter<"UserChatKeyVersion"> | string
  chatId?: Prisma.StringWithAggregatesFilter<"UserChatKeyVersion"> | string
  keyVersion?: Prisma.IntWithAggregatesFilter<"UserChatKeyVersion"> | number
  encryptedKey?: Prisma.StringWithAggregatesFilter<"UserChatKeyVersion"> | string
}

export type UserChatKeyVersionCreateInput = {
  keyVersion: number
  encryptedKey: string
  userChatKey: Prisma.UserChatKeyCreateNestedOneWithoutKeyVersionsInput
}

export type UserChatKeyVersionUncheckedCreateInput = {
  userId: string
  chatId: string
  keyVersion: number
  encryptedKey: string
}

export type UserChatKeyVersionUpdateInput = {
  keyVersion?: Prisma.IntFieldUpdateOperationsInput | number
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
  userChatKey?: Prisma.UserChatKeyUpdateOneRequiredWithoutKeyVersionsNestedInput
}

export type UserChatKeyVersionUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  keyVersion?: Prisma.IntFieldUpdateOperationsInput | number
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserChatKeyVersionCreateManyInput = {
  userId: string
  chatId: string
  keyVersion: number
  encryptedKey: string
}

export type UserChatKeyVersionUpdateManyMutationInput = {
  keyVersion?: Prisma.IntFieldUpdateOperationsInput | number
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserChatKeyVersionUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.StringFieldUpdateOperationsInput | string
  keyVersion?: Prisma.IntFieldUpdateOperationsInput | number
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserChatKeyVersionListRelationFilter = {
  every?: Prisma.UserChatKeyVersionWhereInput
  some?: Prisma.UserChatKeyVersionWhereInput
  none?: Prisma.UserChatKeyVersionWhereInput
}

export type UserChatKeyVersionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserChatKeyVersionUserIdChatIdKeyVersionCompoundUniqueInput = {
  userId: string
  chatId: string
  keyVersion: number
}

export type UserChatKeyVersionCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  keyVersion?: Prisma.SortOrder
  encryptedKey?: Prisma.SortOrder
}

export type UserChatKeyVersionAvgOrderByAggregateInput = {
  keyVersion?: Prisma.SortOrder
}

export type UserChatKeyVersionMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  keyVersion?: Prisma.SortOrder
  encryptedKey?: Prisma.SortOrder
}

export type UserChatKeyVersionMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  keyVersion?: Prisma.SortOrder
  encryptedKey?: Prisma.SortOrder
}

export type UserChatKeyVersionSumOrderByAggregateInput = {
  keyVersion?: Prisma.SortOrder
}

export type UserChatKeyVersionCreateNestedManyWithoutUserChatKeyInput = {
  create?: Prisma.XOR<Prisma.UserChatKeyVersionCreateWithoutUserChatKeyInput, Prisma.UserChatKeyVersionUncheckedCreateWithoutUserChatKeyInput> | Prisma.UserChatKeyVersionCreateWithoutUserChatKeyInput[] | Prisma.UserChatKeyVersionUncheckedCreateWithoutUserChatKeyInput[]
  connectOrCreate?: Prisma.UserChatKeyVersionCreateOrConnectWithoutUserChatKeyInput | Prisma.UserChatKeyVersionCreateOrConnectWithoutUserChatKeyInput[]
  createMany?: Prisma.UserChatKeyVersionCreateManyUserChatKeyInputEnvelope
  connect?: Prisma.UserChatKeyVersionWhereUniqueInput | Prisma.UserChatKeyVersionWhereUniqueInput[]
}

export type UserChatKeyVersionUncheckedCreateNestedManyWithoutUserChatKeyInput = {
  create?: Prisma.XOR<Prisma.UserChatKeyVersionCreateWithoutUserChatKeyInput, Prisma.UserChatKeyVersionUncheckedCreateWithoutUserChatKeyInput> | Prisma.UserChatKeyVersionCreateWithoutUserChatKeyInput[] | Prisma.UserChatKeyVersionUncheckedCreateWithoutUserChatKeyInput[]
  connectOrCreate?: Prisma.UserChatKeyVersionCreateOrConnectWithoutUserChatKeyInput | Prisma.UserChatKeyVersionCreateOrConnectWithoutUserChatKeyInput[]
  createMany?: Prisma.UserChatKeyVersionCreateManyUserChatKeyInputEnvelope
  connect?: Prisma.UserChatKeyVersionWhereUniqueInput | Prisma.UserChatKeyVersionWhereUniqueInput[]
}

export type UserChatKeyVersionUpdateManyWithoutUserChatKeyNestedInput = {
  create?: Prisma.XOR<Prisma.UserChatKeyVersionCreateWithoutUserChatKeyInput, Prisma.UserChatKeyVersionUncheckedCreateWithoutUserChatKeyInput> | Prisma.UserChatKeyVersionCreateWithoutUserChatKeyInput[] | Prisma.UserChatKeyVersionUncheckedCreateWithoutUserChatKeyInput[]
  connectOrCreate?: Prisma.UserChatKeyVersionCreateOrConnectWithoutUserChatKeyInput | Prisma.UserChatKeyVersionCreateOrConnectWithoutUserChatKeyInput[]
  upsert?: Prisma.UserChatKeyVersionUpsertWithWhereUniqueWithoutUserChatKeyInput | Prisma.UserChatKeyVersionUpsertWithWhereUniqueWithoutUserChatKeyInput[]
  createMany?: Prisma.UserChatKeyVersionCreateManyUserChatKeyInputEnvelope
  set?: Prisma.UserChatKeyVersionWhereUniqueInput | Prisma.UserChatKeyVersionWhereUniqueInput[]
  disconnect?: Prisma.UserChatKeyVersionWhereUniqueInput | Prisma.UserChatKeyVersionWhereUniqueInput[]
  delete?: Prisma.UserChatKeyVersionWhereUniqueInput | Prisma.UserChatKeyVersionWhereUniqueInput[]
  connect?: Prisma.UserChatKeyVersionWhereUniqueInput | Prisma.UserChatKeyVersionWhereUniqueInput[]
  update?: Prisma.UserChatKeyVersionUpdateWithWhereUniqueWithoutUserChatKeyInput | Prisma.UserChatKeyVersionUpdateWithWhereUniqueWithoutUserChatKeyInput[]
  updateMany?: Prisma.UserChatKeyVersionUpdateManyWithWhereWithoutUserChatKeyInput | Prisma.UserChatKeyVersionUpdateManyWithWhereWithoutUserChatKeyInput[]
  deleteMany?: Prisma.UserChatKeyVersionScalarWhereInput | Prisma.UserChatKeyVersionScalarWhereInput[]
}

export type UserChatKeyVersionUncheckedUpdateManyWithoutUserChatKeyNestedInput = {
  create?: Prisma.XOR<Prisma.UserChatKeyVersionCreateWithoutUserChatKeyInput, Prisma.UserChatKeyVersionUncheckedCreateWithoutUserChatKeyInput> | Prisma.UserChatKeyVersionCreateWithoutUserChatKeyInput[] | Prisma.UserChatKeyVersionUncheckedCreateWithoutUserChatKeyInput[]
  connectOrCreate?: Prisma.UserChatKeyVersionCreateOrConnectWithoutUserChatKeyInput | Prisma.UserChatKeyVersionCreateOrConnectWithoutUserChatKeyInput[]
  upsert?: Prisma.UserChatKeyVersionUpsertWithWhereUniqueWithoutUserChatKeyInput | Prisma.UserChatKeyVersionUpsertWithWhereUniqueWithoutUserChatKeyInput[]
  createMany?: Prisma.UserChatKeyVersionCreateManyUserChatKeyInputEnvelope
  set?: Prisma.UserChatKeyVersionWhereUniqueInput | Prisma.UserChatKeyVersionWhereUniqueInput[]
  disconnect?: Prisma.UserChatKeyVersionWhereUniqueInput | Prisma.UserChatKeyVersionWhereUniqueInput[]
  delete?: Prisma.UserChatKeyVersionWhereUniqueInput | Prisma.UserChatKeyVersionWhereUniqueInput[]
  connect?: Prisma.UserChatKeyVersionWhereUniqueInput | Prisma.UserChatKeyVersionWhereUniqueInput[]
  update?: Prisma.UserChatKeyVersionUpdateWithWhereUniqueWithoutUserChatKeyInput | Prisma.UserChatKeyVersionUpdateWithWhereUniqueWithoutUserChatKeyInput[]
  updateMany?: Prisma.UserChatKeyVersionUpdateManyWithWhereWithoutUserChatKeyInput | Prisma.UserChatKeyVersionUpdateManyWithWhereWithoutUserChatKeyInput[]
  deleteMany?: Prisma.UserChatKeyVersionScalarWhereInput | Prisma.UserChatKeyVersionScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type UserChatKeyVersionCreateWithoutUserChatKeyInput = {
  keyVersion: number
  encryptedKey: string
}

export type UserChatKeyVersionUncheckedCreateWithoutUserChatKeyInput = {
  keyVersion: number
  encryptedKey: string
}

export type UserChatKeyVersionCreateOrConnectWithoutUserChatKeyInput = {
  where: Prisma.UserChatKeyVersionWhereUniqueInput
  create: Prisma.XOR<Prisma.UserChatKeyVersionCreateWithoutUserChatKeyInput, Prisma.UserChatKeyVersionUncheckedCreateWithoutUserChatKeyInput>
}

export type UserChatKeyVersionCreateManyUserChatKeyInputEnvelope = {
  data: Prisma.UserChatKeyVersionCreateManyUserChatKeyInput | Prisma.UserChatKeyVersionCreateManyUserChatKeyInput[]
  skipDuplicates?: boolean
}

export type UserChatKeyVersionUpsertWithWhereUniqueWithoutUserChatKeyInput = {
  where: Prisma.UserChatKeyVersionWhereUniqueInput
  update: Prisma.XOR<Prisma.UserChatKeyVersionUpdateWithoutUserChatKeyInput, Prisma.UserChatKeyVersionUncheckedUpdateWithoutUserChatKeyInput>
  create: Prisma.XOR<Prisma.UserChatKeyVersionCreateWithoutUserChatKeyInput, Prisma.UserChatKeyVersionUncheckedCreateWithoutUserChatKeyInput>
}

export type UserChatKeyVersionUpdateWithWhereUniqueWithoutUserChatKeyInput = {
  where: Prisma.UserChatKeyVersionWhereUniqueInput
  data: Prisma.XOR<Prisma.UserChatKeyVersionUpdateWithoutUserChatKeyInput, Prisma.UserChatKeyVersionUncheckedUpdateWithoutUserChatKeyInput>
}

export type UserChatKeyVersionUpdateManyWithWhereWithoutUserChatKeyInput = {
  where: Prisma.UserChatKeyVersionScalarWhereInput
  data: Prisma.XOR<Prisma.UserChatKeyVersionUpdateManyMutationInput, Prisma.UserChatKeyVersionUncheckedUpdateManyWithoutUserChatKeyInput>
}

export type UserChatKeyVersionScalarWhereInput = {
  AND?: Prisma.UserChatKeyVersionScalarWhereInput | Prisma.UserChatKeyVersionScalarWhereInput[]
  OR?: Prisma.UserChatKeyVersionScalarWhereInput[]
  NOT?: Prisma.UserChatKeyVersionScalarWhereInput | Prisma.UserChatKeyVersionScalarWhereInput[]
  userId?: Prisma.StringFilter<"UserChatKeyVersion"> | string
  chatId?: Prisma.StringFilter<"UserChatKeyVersion"> | string
  keyVersion?: Prisma.IntFilter<"UserChatKeyVersion"> | number
  encryptedKey?: Prisma.StringFilter<"UserChatKeyVersion"> | string
}

export type UserChatKeyVersionCreateManyUserChatKeyInput = {
  keyVersion: number
  encryptedKey: string
}

export type UserChatKeyVersionUpdateWithoutUserChatKeyInput = {
  keyVersion?: Prisma.IntFieldUpdateOperationsInput | number
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserChatKeyVersionUncheckedUpdateWithoutUserChatKeyInput = {
  keyVersion?: Prisma.IntFieldUpdateOperationsInput | number
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserChatKeyVersionUncheckedUpdateManyWithoutUserChatKeyInput = {
  keyVersion?: Prisma.IntFieldUpdateOperationsInput | number
  encryptedKey?: Prisma.StringFieldUpdateOperationsInput | string
}



export type UserChatKeyVersionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  chatId?: boolean
  keyVersion?: boolean
  encryptedKey?: boolean
  userChatKey?: boolean | Prisma.UserChatKeyDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userChatKeyVersion"]>

export type UserChatKeyVersionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  chatId?: boolean
  keyVersion?: boolean
  encryptedKey?: boolean
  userChatKey?: boolean | Prisma.UserChatKeyDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userChatKeyVersion"]>

export type UserChatKeyVersionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  chatId?: boolean
  keyVersion?: boolean
  encryptedKey?: boolean
  userChatKey?: boolean | Prisma.UserChatKeyDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userChatKeyVersion"]>

export type UserChatKeyVersionSelectScalar = {
  userId?: boolean
  chatId?: boolean
  keyVersion?: boolean
  encryptedKey?: boolean
}

export type UserChatKeyVersionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"userId" | "chatId" | "keyVersion" | "encryptedKey", ExtArgs["result"]["userChatKeyVersion"]>
export type UserChatKeyVersionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  userChatKey?: boolean | Prisma.UserChatKeyDefaultArgs<ExtArgs>
}
export type UserChatKeyVersionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  userChatKey?: boolean | Prisma.UserChatKeyDefaultArgs<ExtArgs>
}
export type UserChatKeyVersionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  userChatKey?: boolean | Prisma.UserChatKeyDefaultArgs<ExtArgs>
}

export type $UserChatKeyVersionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserChatKeyVersion"
  objects: {
    userChatKey: Prisma.$UserChatKeyPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    userId: string
    chatId: string
    keyVersion: number
    encryptedKey: string
  }, ExtArgs["result"]["userChatKeyVersion"]>
  composites: {}
}

export type UserChatKeyVersionGetPayload<S extends boolean | null | undefined | UserChatKeyVersionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserChatKeyVersionPayload, S>

export type UserChatKeyVersionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserChatKeyVersionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserChatKeyVersionCountAggregateInputType | true
  }

export interface UserChatKeyVersionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserChatKeyVersion'], meta: { name: 'UserChatKeyVersion' } }
  /**
   * Find zero or one UserChatKeyVersion that matches the filter.
   * @param {UserChatKeyVersionFindUniqueArgs} args - Arguments to find a UserChatKeyVersion
   * @example
   * // Get one UserChatKeyVersion
   * const userChatKeyVersion = await prisma.userChatKeyVersion.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserChatKeyVersionFindUniqueArgs>(args: Prisma.SelectSubset<T, UserChatKeyVersionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserChatKeyVersionClient<runtime.Types.Result.GetResult<Prisma.$UserChatKeyVersionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserChatKeyVersion that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserChatKeyVersionFindUniqueOrThrowArgs} args - Arguments to find a UserChatKeyVersion
   * @example
   * // Get one UserChatKeyVersion
   * const userChatKeyVersion = await prisma.userChatKeyVersion.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserChatKeyVersionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserChatKeyVersionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserChatKeyVersionClient<runtime.Types.Result.GetResult<Prisma.$UserChatKeyVersionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserChatKeyVersion that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChatKeyVersionFindFirstArgs} args - Arguments to find a UserChatKeyVersion
   * @example
   * // Get one UserChatKeyVersion
   * const userChatKeyVersion = await prisma.userChatKeyVersion.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserChatKeyVersionFindFirstArgs>(args?: Prisma.SelectSubset<T, UserChatKeyVersionFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserChatKeyVersionClient<runtime.Types.Result.GetResult<Prisma.$UserChatKeyVersionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserChatKeyVersion that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChatKeyVersionFindFirstOrThrowArgs} args - Arguments to find a UserChatKeyVersion
   * @example
   * // Get one UserChatKeyVersion
   * const userChatKeyVersion = await prisma.userChatKeyVersion.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserChatKeyVersionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserChatKeyVersionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserChatKeyVersionClient<runtime.Types.Result.GetResult<Prisma.$UserChatKeyVersionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserChatKeyVersions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChatKeyVersionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserChatKeyVersions
   * const userChatKeyVersions = await prisma.userChatKeyVersion.findMany()
   * 
   * // Get first 10 UserChatKeyVersions
   * const userChatKeyVersions = await prisma.userChatKeyVersion.findMany({ take: 10 })
   * 
   * // Only select the `userId`
   * const userChatKeyVersionWithUserIdOnly = await prisma.userChatKeyVersion.findMany({ select: { userId: true } })
   * 
   */
  findMany<T extends UserChatKeyVersionFindManyArgs>(args?: Prisma.SelectSubset<T, UserChatKeyVersionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserChatKeyVersionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserChatKeyVersion.
   * @param {UserChatKeyVersionCreateArgs} args - Arguments to create a UserChatKeyVersion.
   * @example
   * // Create one UserChatKeyVersion
   * const UserChatKeyVersion = await prisma.userChatKeyVersion.create({
   *   data: {
   *     // ... data to create a UserChatKeyVersion
   *   }
   * })
   * 
   */
  create<T extends UserChatKeyVersionCreateArgs>(args: Prisma.SelectSubset<T, UserChatKeyVersionCreateArgs<ExtArgs>>): Prisma.Prisma__UserChatKeyVersionClient<runtime.Types.Result.GetResult<Prisma.$UserChatKeyVersionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserChatKeyVersions.
   * @param {UserChatKeyVersionCreateManyArgs} args - Arguments to create many UserChatKeyVersions.
   * @example
   * // Create many UserChatKeyVersions
   * const userChatKeyVersion = await prisma.userChatKeyVersion.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserChatKeyVersionCreateManyArgs>(args?: Prisma.SelectSubset<T, UserChatKeyVersionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserChatKeyVersions and returns the data saved in the database.
   * @param {UserChatKeyVersionCreateManyAndReturnArgs} args - Arguments to create many UserChatKeyVersions.
   * @example
   * // Create many UserChatKeyVersions
   * const userChatKeyVersion = await prisma.userChatKeyVersion.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserChatKeyVersions and only return the `userId`
   * const userChatKeyVersionWithUserIdOnly = await prisma.userChatKeyVersion.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserChatKeyVersionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserChatKeyVersionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserChatKeyVersionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserChatKeyVersion.
   * @param {UserChatKeyVersionDeleteArgs} args - Arguments to delete one UserChatKeyVersion.
   * @example
   * // Delete one UserChatKeyVersion
   * const UserChatKeyVersion = await prisma.userChatKeyVersion.delete({
   *   where: {
   *     // ... filter to delete one UserChatKeyVersion
   *   }
   * })
   * 
   */
  delete<T extends UserChatKeyVersionDeleteArgs>(args: Prisma.SelectSubset<T, UserChatKeyVersionDeleteArgs<ExtArgs>>): Prisma.Prisma__UserChatKeyVersionClient<runtime.Types.Result.GetResult<Prisma.$UserChatKeyVersionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserChatKeyVersion.
   * @param {UserChatKeyVersionUpdateArgs} args - Arguments to update one UserChatKeyVersion.
   * @example
   * // Update one UserChatKeyVersion
   * const userChatKeyVersion = await prisma.userChatKeyVersion.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserChatKeyVersionUpdateArgs>(args: Prisma.SelectSubset<T, UserChatKeyVersionUpdateArgs<ExtArgs>>): Prisma.Prisma__UserChatKeyVersionClient<runtime.Types.Result.GetResult<Prisma.$UserChatKeyVersionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserChatKeyVersions.
   * @param {UserChatKeyVersionDeleteManyArgs} args - Arguments to filter UserChatKeyVersions to delete.
   * @example
   * // Delete a few UserChatKeyVersions
   * const { count } = await prisma.userChatKeyVersion.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserChatKeyVersionDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserChatKeyVersionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserChatKeyVersions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChatKeyVersionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserChatKeyVersions
   * const userChatKeyVersion = await prisma.userChatKeyVersion.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserChatKeyVersionUpdateManyArgs>(args: Prisma.SelectSubset<T, UserChatKeyVersionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserChatKeyVersions and returns the data updated in the database.
   * @param {UserChatKeyVersionUpdateManyAndReturnArgs} args - Arguments to update many UserChatKeyVersions.
   * @example
   * // Update many UserChatKeyVersions
   * const userChatKeyVersion = await prisma.userChatKeyVersion.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserChatKeyVersions and only return the `userId`
   * const userChatKeyVersionWithUserIdOnly = await prisma.userChatKeyVersion.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserChatKeyVersionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserChatKeyVersionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserChatKeyVersionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserChatKeyVersion.
   * @param {UserChatKeyVersionUpsertArgs} args - Arguments to update or create a UserChatKeyVersion.
   * @example
   * // Update or create a UserChatKeyVersion
   * const userChatKeyVersion = await prisma.userChatKeyVersion.upsert({
   *   create: {
   *     // ... data to create a UserChatKeyVersion
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserChatKeyVersion we want to update
   *   }
   * })
   */
  upsert<T extends UserChatKeyVersionUpsertArgs>(args: Prisma.SelectSubset<T, UserChatKeyVersionUpsertArgs<ExtArgs>>): Prisma.Prisma__UserChatKeyVersionClient<runtime.Types.Result.GetResult<Prisma.$UserChatKeyVersionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserChatKeyVersions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChatKeyVersionCountArgs} args - Arguments to filter UserChatKeyVersions to count.
   * @example
   * // Count the number of UserChatKeyVersions
   * const count = await prisma.userChatKeyVersion.count({
   *   where: {
   *     // ... the filter for the UserChatKeyVersions we want to count
   *   }
   * })
  **/
  count<T extends UserChatKeyVersionCountArgs>(
    args?: Prisma.Subset<T, UserChatKeyVersionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserChatKeyVersionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserChatKeyVersion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChatKeyVersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserChatKeyVersionAggregateArgs>(args: Prisma.Subset<T, UserChatKeyVersionAggregateArgs>): Prisma.PrismaPromise<GetUserChatKeyVersionAggregateType<T>>

  /**
   * Group by UserChatKeyVersion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChatKeyVersionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserChatKeyVersionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserChatKeyVersionGroupByArgs['orderBy'] }
      : { orderBy?: UserChatKeyVersionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserChatKeyVersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserChatKeyVersionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserChatKeyVersion model
 */
readonly fields: UserChatKeyVersionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserChatKeyVersion.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserChatKeyVersionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  userChatKey<T extends Prisma.UserChatKeyDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserChatKeyDefaultArgs<ExtArgs>>): Prisma.Prisma__UserChatKeyClient<runtime.Types.Result.GetResult<Prisma.$UserChatKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserChatKeyVersion model
 */
export interface UserChatKeyVersionFieldRefs {
  readonly userId: Prisma.FieldRef<"UserChatKeyVersion", 'String'>
  readonly chatId: Prisma.FieldRef<"UserChatKeyVersion", 'String'>
  readonly keyVersion: Prisma.FieldRef<"UserChatKeyVersion", 'Int'>
  readonly encryptedKey: Prisma.FieldRef<"UserChatKeyVersion", 'String'>
}
    

// Custom InputTypes
/**
 * UserChatKeyVersion findUnique
 */
export type UserChatKeyVersionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKeyVersion
   */
  select?: Prisma.UserChatKeyVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKeyVersion
   */
  omit?: Prisma.UserChatKeyVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyVersionInclude<ExtArgs> | null
  /**
   * Filter, which UserChatKeyVersion to fetch.
   */
  where: Prisma.UserChatKeyVersionWhereUniqueInput
}

/**
 * UserChatKeyVersion findUniqueOrThrow
 */
export type UserChatKeyVersionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKeyVersion
   */
  select?: Prisma.UserChatKeyVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKeyVersion
   */
  omit?: Prisma.UserChatKeyVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyVersionInclude<ExtArgs> | null
  /**
   * Filter, which UserChatKeyVersion to fetch.
   */
  where: Prisma.UserChatKeyVersionWhereUniqueInput
}

/**
 * UserChatKeyVersion findFirst
 */
export type UserChatKeyVersionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKeyVersion
   */
  select?: Prisma.UserChatKeyVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKeyVersion
   */
  omit?: Prisma.UserChatKeyVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyVersionInclude<ExtArgs> | null
  /**
   * Filter, which UserChatKeyVersion to fetch.
   */
  where?: Prisma.UserChatKeyVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserChatKeyVersions to fetch.
   */
  orderBy?: Prisma.UserChatKeyVersionOrderByWithRelationInput | Prisma.UserChatKeyVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserChatKeyVersions.
   */
  cursor?: Prisma.UserChatKeyVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserChatKeyVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserChatKeyVersions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserChatKeyVersions.
   */
  distinct?: Prisma.UserChatKeyVersionScalarFieldEnum | Prisma.UserChatKeyVersionScalarFieldEnum[]
}

/**
 * UserChatKeyVersion findFirstOrThrow
 */
export type UserChatKeyVersionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKeyVersion
   */
  select?: Prisma.UserChatKeyVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKeyVersion
   */
  omit?: Prisma.UserChatKeyVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyVersionInclude<ExtArgs> | null
  /**
   * Filter, which UserChatKeyVersion to fetch.
   */
  where?: Prisma.UserChatKeyVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserChatKeyVersions to fetch.
   */
  orderBy?: Prisma.UserChatKeyVersionOrderByWithRelationInput | Prisma.UserChatKeyVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserChatKeyVersions.
   */
  cursor?: Prisma.UserChatKeyVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserChatKeyVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserChatKeyVersions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserChatKeyVersions.
   */
  distinct?: Prisma.UserChatKeyVersionScalarFieldEnum | Prisma.UserChatKeyVersionScalarFieldEnum[]
}

/**
 * UserChatKeyVersion findMany
 */
export type UserChatKeyVersionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKeyVersion
   */
  select?: Prisma.UserChatKeyVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKeyVersion
   */
  omit?: Prisma.UserChatKeyVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyVersionInclude<ExtArgs> | null
  /**
   * Filter, which UserChatKeyVersions to fetch.
   */
  where?: Prisma.UserChatKeyVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserChatKeyVersions to fetch.
   */
  orderBy?: Prisma.UserChatKeyVersionOrderByWithRelationInput | Prisma.UserChatKeyVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserChatKeyVersions.
   */
  cursor?: Prisma.UserChatKeyVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserChatKeyVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserChatKeyVersions.
   */
  skip?: number
  distinct?: Prisma.UserChatKeyVersionScalarFieldEnum | Prisma.UserChatKeyVersionScalarFieldEnum[]
}

/**
 * UserChatKeyVersion create
 */
export type UserChatKeyVersionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKeyVersion
   */
  select?: Prisma.UserChatKeyVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKeyVersion
   */
  omit?: Prisma.UserChatKeyVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyVersionInclude<ExtArgs> | null
  /**
   * The data needed to create a UserChatKeyVersion.
   */
  data: Prisma.XOR<Prisma.UserChatKeyVersionCreateInput, Prisma.UserChatKeyVersionUncheckedCreateInput>
}

/**
 * UserChatKeyVersion createMany
 */
export type UserChatKeyVersionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserChatKeyVersions.
   */
  data: Prisma.UserChatKeyVersionCreateManyInput | Prisma.UserChatKeyVersionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserChatKeyVersion createManyAndReturn
 */
export type UserChatKeyVersionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKeyVersion
   */
  select?: Prisma.UserChatKeyVersionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKeyVersion
   */
  omit?: Prisma.UserChatKeyVersionOmit<ExtArgs> | null
  /**
   * The data used to create many UserChatKeyVersions.
   */
  data: Prisma.UserChatKeyVersionCreateManyInput | Prisma.UserChatKeyVersionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyVersionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserChatKeyVersion update
 */
export type UserChatKeyVersionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKeyVersion
   */
  select?: Prisma.UserChatKeyVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKeyVersion
   */
  omit?: Prisma.UserChatKeyVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyVersionInclude<ExtArgs> | null
  /**
   * The data needed to update a UserChatKeyVersion.
   */
  data: Prisma.XOR<Prisma.UserChatKeyVersionUpdateInput, Prisma.UserChatKeyVersionUncheckedUpdateInput>
  /**
   * Choose, which UserChatKeyVersion to update.
   */
  where: Prisma.UserChatKeyVersionWhereUniqueInput
}

/**
 * UserChatKeyVersion updateMany
 */
export type UserChatKeyVersionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserChatKeyVersions.
   */
  data: Prisma.XOR<Prisma.UserChatKeyVersionUpdateManyMutationInput, Prisma.UserChatKeyVersionUncheckedUpdateManyInput>
  /**
   * Filter which UserChatKeyVersions to update
   */
  where?: Prisma.UserChatKeyVersionWhereInput
  /**
   * Limit how many UserChatKeyVersions to update.
   */
  limit?: number
}

/**
 * UserChatKeyVersion updateManyAndReturn
 */
export type UserChatKeyVersionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKeyVersion
   */
  select?: Prisma.UserChatKeyVersionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKeyVersion
   */
  omit?: Prisma.UserChatKeyVersionOmit<ExtArgs> | null
  /**
   * The data used to update UserChatKeyVersions.
   */
  data: Prisma.XOR<Prisma.UserChatKeyVersionUpdateManyMutationInput, Prisma.UserChatKeyVersionUncheckedUpdateManyInput>
  /**
   * Filter which UserChatKeyVersions to update
   */
  where?: Prisma.UserChatKeyVersionWhereInput
  /**
   * Limit how many UserChatKeyVersions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyVersionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserChatKeyVersion upsert
 */
export type UserChatKeyVersionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKeyVersion
   */
  select?: Prisma.UserChatKeyVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKeyVersion
   */
  omit?: Prisma.UserChatKeyVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyVersionInclude<ExtArgs> | null
  /**
   * The filter to search for the UserChatKeyVersion to update in case it exists.
   */
  where: Prisma.UserChatKeyVersionWhereUniqueInput
  /**
   * In case the UserChatKeyVersion found by the `where` argument doesn't exist, create a new UserChatKeyVersion with this data.
   */
  create: Prisma.XOR<Prisma.UserChatKeyVersionCreateInput, Prisma.UserChatKeyVersionUncheckedCreateInput>
  /**
   * In case the UserChatKeyVersion was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserChatKeyVersionUpdateInput, Prisma.UserChatKeyVersionUncheckedUpdateInput>
}

/**
 * UserChatKeyVersion delete
 */
export type UserChatKeyVersionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKeyVersion
   */
  select?: Prisma.UserChatKeyVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKeyVersion
   */
  omit?: Prisma.UserChatKeyVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyVersionInclude<ExtArgs> | null
  /**
   * Filter which UserChatKeyVersion to delete.
   */
  where: Prisma.UserChatKeyVersionWhereUniqueInput
}

/**
 * UserChatKeyVersion deleteMany
 */
export type UserChatKeyVersionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserChatKeyVersions to delete
   */
  where?: Prisma.UserChatKeyVersionWhereInput
  /**
   * Limit how many UserChatKeyVersions to delete.
   */
  limit?: number
}

/**
 * UserChatKeyVersion without action
 */
export type UserChatKeyVersionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChatKeyVersion
   */
  select?: Prisma.UserChatKeyVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChatKeyVersion
   */
  omit?: Prisma.UserChatKeyVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChatKeyVersionInclude<ExtArgs> | null
}
