
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Chat` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Chat
 * 
 */
export type ChatModel = runtime.Types.Result.DefaultSelection<Prisma.$ChatPayload>

export type AggregateChat = {
  _count: ChatCountAggregateOutputType | null
  _min: ChatMinAggregateOutputType | null
  _max: ChatMaxAggregateOutputType | null
}

export type ChatMinAggregateOutputType = {
  id: string | null
  name: string | null
  type: string | null
  image: string | null
  imageIv: string | null
  ownerId: string | null
  salt: string | null
}

export type ChatMaxAggregateOutputType = {
  id: string | null
  name: string | null
  type: string | null
  image: string | null
  imageIv: string | null
  ownerId: string | null
  salt: string | null
}

export type ChatCountAggregateOutputType = {
  id: number
  name: number
  type: number
  image: number
  imageIv: number
  ownerId: number
  salt: number
  _all: number
}


export type ChatMinAggregateInputType = {
  id?: true
  name?: true
  type?: true
  image?: true
  imageIv?: true
  ownerId?: true
  salt?: true
}

export type ChatMaxAggregateInputType = {
  id?: true
  name?: true
  type?: true
  image?: true
  imageIv?: true
  ownerId?: true
  salt?: true
}

export type ChatCountAggregateInputType = {
  id?: true
  name?: true
  type?: true
  image?: true
  imageIv?: true
  ownerId?: true
  salt?: true
  _all?: true
}

export type ChatAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Chat to aggregate.
   */
  where?: Prisma.ChatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chats to fetch.
   */
  orderBy?: Prisma.ChatOrderByWithRelationInput | Prisma.ChatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Chats
  **/
  _count?: true | ChatCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChatMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChatMaxAggregateInputType
}

export type GetChatAggregateType<T extends ChatAggregateArgs> = {
      [P in keyof T & keyof AggregateChat]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChat[P]>
    : Prisma.GetScalarType<T[P], AggregateChat[P]>
}




export type ChatGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatWhereInput
  orderBy?: Prisma.ChatOrderByWithAggregationInput | Prisma.ChatOrderByWithAggregationInput[]
  by: Prisma.ChatScalarFieldEnum[] | Prisma.ChatScalarFieldEnum
  having?: Prisma.ChatScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChatCountAggregateInputType | true
  _min?: ChatMinAggregateInputType
  _max?: ChatMaxAggregateInputType
}

export type ChatGroupByOutputType = {
  id: string
  name: string | null
  type: string
  image: string | null
  imageIv: string | null
  ownerId: string
  salt: string
  _count: ChatCountAggregateOutputType | null
  _min: ChatMinAggregateOutputType | null
  _max: ChatMaxAggregateOutputType | null
}

type GetChatGroupByPayload<T extends ChatGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChatGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChatGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChatGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChatGroupByOutputType[P]>
      }
    >
  >



export type ChatWhereInput = {
  AND?: Prisma.ChatWhereInput | Prisma.ChatWhereInput[]
  OR?: Prisma.ChatWhereInput[]
  NOT?: Prisma.ChatWhereInput | Prisma.ChatWhereInput[]
  id?: Prisma.StringFilter<"Chat"> | string
  name?: Prisma.StringNullableFilter<"Chat"> | string | null
  type?: Prisma.StringFilter<"Chat"> | string
  image?: Prisma.StringNullableFilter<"Chat"> | string | null
  imageIv?: Prisma.StringNullableFilter<"Chat"> | string | null
  ownerId?: Prisma.StringFilter<"Chat"> | string
  salt?: Prisma.StringFilter<"Chat"> | string
  owner?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  participants?: Prisma.UserListRelationFilter
  messages?: Prisma.MessageListRelationFilter
}

export type ChatOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrder
  image?: Prisma.SortOrderInput | Prisma.SortOrder
  imageIv?: Prisma.SortOrderInput | Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  salt?: Prisma.SortOrder
  owner?: Prisma.UserOrderByWithRelationInput
  participants?: Prisma.UserOrderByRelationAggregateInput
  messages?: Prisma.MessageOrderByRelationAggregateInput
}

export type ChatWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ChatWhereInput | Prisma.ChatWhereInput[]
  OR?: Prisma.ChatWhereInput[]
  NOT?: Prisma.ChatWhereInput | Prisma.ChatWhereInput[]
  name?: Prisma.StringNullableFilter<"Chat"> | string | null
  type?: Prisma.StringFilter<"Chat"> | string
  image?: Prisma.StringNullableFilter<"Chat"> | string | null
  imageIv?: Prisma.StringNullableFilter<"Chat"> | string | null
  ownerId?: Prisma.StringFilter<"Chat"> | string
  salt?: Prisma.StringFilter<"Chat"> | string
  owner?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  participants?: Prisma.UserListRelationFilter
  messages?: Prisma.MessageListRelationFilter
}, "id">

export type ChatOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrder
  image?: Prisma.SortOrderInput | Prisma.SortOrder
  imageIv?: Prisma.SortOrderInput | Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  salt?: Prisma.SortOrder
  _count?: Prisma.ChatCountOrderByAggregateInput
  _max?: Prisma.ChatMaxOrderByAggregateInput
  _min?: Prisma.ChatMinOrderByAggregateInput
}

export type ChatScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChatScalarWhereWithAggregatesInput | Prisma.ChatScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChatScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChatScalarWhereWithAggregatesInput | Prisma.ChatScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Chat"> | string
  name?: Prisma.StringNullableWithAggregatesFilter<"Chat"> | string | null
  type?: Prisma.StringWithAggregatesFilter<"Chat"> | string
  image?: Prisma.StringNullableWithAggregatesFilter<"Chat"> | string | null
  imageIv?: Prisma.StringNullableWithAggregatesFilter<"Chat"> | string | null
  ownerId?: Prisma.StringWithAggregatesFilter<"Chat"> | string
  salt?: Prisma.StringWithAggregatesFilter<"Chat"> | string
}

export type ChatCreateInput = {
  id?: string
  name?: string | null
  type: string
  image?: string | null
  imageIv?: string | null
  salt: string
  owner: Prisma.UserCreateNestedOneWithoutOwnedChatsInput
  participants?: Prisma.UserCreateNestedManyWithoutChatsInput
  messages?: Prisma.MessageCreateNestedManyWithoutChatInput
}

export type ChatUncheckedCreateInput = {
  id?: string
  name?: string | null
  type: string
  image?: string | null
  imageIv?: string | null
  ownerId: string
  salt: string
  participants?: Prisma.UserUncheckedCreateNestedManyWithoutChatsInput
  messages?: Prisma.MessageUncheckedCreateNestedManyWithoutChatInput
}

export type ChatUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageIv?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  salt?: Prisma.StringFieldUpdateOperationsInput | string
  owner?: Prisma.UserUpdateOneRequiredWithoutOwnedChatsNestedInput
  participants?: Prisma.UserUpdateManyWithoutChatsNestedInput
  messages?: Prisma.MessageUpdateManyWithoutChatNestedInput
}

export type ChatUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageIv?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  salt?: Prisma.StringFieldUpdateOperationsInput | string
  participants?: Prisma.UserUncheckedUpdateManyWithoutChatsNestedInput
  messages?: Prisma.MessageUncheckedUpdateManyWithoutChatNestedInput
}

export type ChatCreateManyInput = {
  id?: string
  name?: string | null
  type: string
  image?: string | null
  imageIv?: string | null
  ownerId: string
  salt: string
}

export type ChatUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageIv?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  salt?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ChatUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageIv?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  salt?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ChatListRelationFilter = {
  every?: Prisma.ChatWhereInput
  some?: Prisma.ChatWhereInput
  none?: Prisma.ChatWhereInput
}

export type ChatOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ChatCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  image?: Prisma.SortOrder
  imageIv?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  salt?: Prisma.SortOrder
}

export type ChatMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  image?: Prisma.SortOrder
  imageIv?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  salt?: Prisma.SortOrder
}

export type ChatMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  image?: Prisma.SortOrder
  imageIv?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  salt?: Prisma.SortOrder
}

export type ChatScalarRelationFilter = {
  is?: Prisma.ChatWhereInput
  isNot?: Prisma.ChatWhereInput
}

export type ChatCreateNestedManyWithoutOwnerInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutOwnerInput, Prisma.ChatUncheckedCreateWithoutOwnerInput> | Prisma.ChatCreateWithoutOwnerInput[] | Prisma.ChatUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutOwnerInput | Prisma.ChatCreateOrConnectWithoutOwnerInput[]
  createMany?: Prisma.ChatCreateManyOwnerInputEnvelope
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
}

export type ChatCreateNestedManyWithoutParticipantsInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutParticipantsInput, Prisma.ChatUncheckedCreateWithoutParticipantsInput> | Prisma.ChatCreateWithoutParticipantsInput[] | Prisma.ChatUncheckedCreateWithoutParticipantsInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutParticipantsInput | Prisma.ChatCreateOrConnectWithoutParticipantsInput[]
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
}

export type ChatUncheckedCreateNestedManyWithoutOwnerInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutOwnerInput, Prisma.ChatUncheckedCreateWithoutOwnerInput> | Prisma.ChatCreateWithoutOwnerInput[] | Prisma.ChatUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutOwnerInput | Prisma.ChatCreateOrConnectWithoutOwnerInput[]
  createMany?: Prisma.ChatCreateManyOwnerInputEnvelope
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
}

export type ChatUncheckedCreateNestedManyWithoutParticipantsInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutParticipantsInput, Prisma.ChatUncheckedCreateWithoutParticipantsInput> | Prisma.ChatCreateWithoutParticipantsInput[] | Prisma.ChatUncheckedCreateWithoutParticipantsInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutParticipantsInput | Prisma.ChatCreateOrConnectWithoutParticipantsInput[]
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
}

export type ChatUpdateManyWithoutOwnerNestedInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutOwnerInput, Prisma.ChatUncheckedCreateWithoutOwnerInput> | Prisma.ChatCreateWithoutOwnerInput[] | Prisma.ChatUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutOwnerInput | Prisma.ChatCreateOrConnectWithoutOwnerInput[]
  upsert?: Prisma.ChatUpsertWithWhereUniqueWithoutOwnerInput | Prisma.ChatUpsertWithWhereUniqueWithoutOwnerInput[]
  createMany?: Prisma.ChatCreateManyOwnerInputEnvelope
  set?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  disconnect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  delete?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  update?: Prisma.ChatUpdateWithWhereUniqueWithoutOwnerInput | Prisma.ChatUpdateWithWhereUniqueWithoutOwnerInput[]
  updateMany?: Prisma.ChatUpdateManyWithWhereWithoutOwnerInput | Prisma.ChatUpdateManyWithWhereWithoutOwnerInput[]
  deleteMany?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[]
}

export type ChatUpdateManyWithoutParticipantsNestedInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutParticipantsInput, Prisma.ChatUncheckedCreateWithoutParticipantsInput> | Prisma.ChatCreateWithoutParticipantsInput[] | Prisma.ChatUncheckedCreateWithoutParticipantsInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutParticipantsInput | Prisma.ChatCreateOrConnectWithoutParticipantsInput[]
  upsert?: Prisma.ChatUpsertWithWhereUniqueWithoutParticipantsInput | Prisma.ChatUpsertWithWhereUniqueWithoutParticipantsInput[]
  set?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  disconnect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  delete?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  update?: Prisma.ChatUpdateWithWhereUniqueWithoutParticipantsInput | Prisma.ChatUpdateWithWhereUniqueWithoutParticipantsInput[]
  updateMany?: Prisma.ChatUpdateManyWithWhereWithoutParticipantsInput | Prisma.ChatUpdateManyWithWhereWithoutParticipantsInput[]
  deleteMany?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[]
}

export type ChatUncheckedUpdateManyWithoutOwnerNestedInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutOwnerInput, Prisma.ChatUncheckedCreateWithoutOwnerInput> | Prisma.ChatCreateWithoutOwnerInput[] | Prisma.ChatUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutOwnerInput | Prisma.ChatCreateOrConnectWithoutOwnerInput[]
  upsert?: Prisma.ChatUpsertWithWhereUniqueWithoutOwnerInput | Prisma.ChatUpsertWithWhereUniqueWithoutOwnerInput[]
  createMany?: Prisma.ChatCreateManyOwnerInputEnvelope
  set?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  disconnect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  delete?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  update?: Prisma.ChatUpdateWithWhereUniqueWithoutOwnerInput | Prisma.ChatUpdateWithWhereUniqueWithoutOwnerInput[]
  updateMany?: Prisma.ChatUpdateManyWithWhereWithoutOwnerInput | Prisma.ChatUpdateManyWithWhereWithoutOwnerInput[]
  deleteMany?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[]
}

export type ChatUncheckedUpdateManyWithoutParticipantsNestedInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutParticipantsInput, Prisma.ChatUncheckedCreateWithoutParticipantsInput> | Prisma.ChatCreateWithoutParticipantsInput[] | Prisma.ChatUncheckedCreateWithoutParticipantsInput[]
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutParticipantsInput | Prisma.ChatCreateOrConnectWithoutParticipantsInput[]
  upsert?: Prisma.ChatUpsertWithWhereUniqueWithoutParticipantsInput | Prisma.ChatUpsertWithWhereUniqueWithoutParticipantsInput[]
  set?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  disconnect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  delete?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[]
  update?: Prisma.ChatUpdateWithWhereUniqueWithoutParticipantsInput | Prisma.ChatUpdateWithWhereUniqueWithoutParticipantsInput[]
  updateMany?: Prisma.ChatUpdateManyWithWhereWithoutParticipantsInput | Prisma.ChatUpdateManyWithWhereWithoutParticipantsInput[]
  deleteMany?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[]
}

export type ChatCreateNestedOneWithoutMessagesInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutMessagesInput, Prisma.ChatUncheckedCreateWithoutMessagesInput>
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutMessagesInput
  connect?: Prisma.ChatWhereUniqueInput
}

export type ChatUpdateOneRequiredWithoutMessagesNestedInput = {
  create?: Prisma.XOR<Prisma.ChatCreateWithoutMessagesInput, Prisma.ChatUncheckedCreateWithoutMessagesInput>
  connectOrCreate?: Prisma.ChatCreateOrConnectWithoutMessagesInput
  upsert?: Prisma.ChatUpsertWithoutMessagesInput
  connect?: Prisma.ChatWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChatUpdateToOneWithWhereWithoutMessagesInput, Prisma.ChatUpdateWithoutMessagesInput>, Prisma.ChatUncheckedUpdateWithoutMessagesInput>
}

export type ChatCreateWithoutOwnerInput = {
  id?: string
  name?: string | null
  type: string
  image?: string | null
  imageIv?: string | null
  salt: string
  participants?: Prisma.UserCreateNestedManyWithoutChatsInput
  messages?: Prisma.MessageCreateNestedManyWithoutChatInput
}

export type ChatUncheckedCreateWithoutOwnerInput = {
  id?: string
  name?: string | null
  type: string
  image?: string | null
  imageIv?: string | null
  salt: string
  participants?: Prisma.UserUncheckedCreateNestedManyWithoutChatsInput
  messages?: Prisma.MessageUncheckedCreateNestedManyWithoutChatInput
}

export type ChatCreateOrConnectWithoutOwnerInput = {
  where: Prisma.ChatWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatCreateWithoutOwnerInput, Prisma.ChatUncheckedCreateWithoutOwnerInput>
}

export type ChatCreateManyOwnerInputEnvelope = {
  data: Prisma.ChatCreateManyOwnerInput | Prisma.ChatCreateManyOwnerInput[]
  skipDuplicates?: boolean
}

export type ChatCreateWithoutParticipantsInput = {
  id?: string
  name?: string | null
  type: string
  image?: string | null
  imageIv?: string | null
  salt: string
  owner: Prisma.UserCreateNestedOneWithoutOwnedChatsInput
  messages?: Prisma.MessageCreateNestedManyWithoutChatInput
}

export type ChatUncheckedCreateWithoutParticipantsInput = {
  id?: string
  name?: string | null
  type: string
  image?: string | null
  imageIv?: string | null
  ownerId: string
  salt: string
  messages?: Prisma.MessageUncheckedCreateNestedManyWithoutChatInput
}

export type ChatCreateOrConnectWithoutParticipantsInput = {
  where: Prisma.ChatWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatCreateWithoutParticipantsInput, Prisma.ChatUncheckedCreateWithoutParticipantsInput>
}

export type ChatUpsertWithWhereUniqueWithoutOwnerInput = {
  where: Prisma.ChatWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatUpdateWithoutOwnerInput, Prisma.ChatUncheckedUpdateWithoutOwnerInput>
  create: Prisma.XOR<Prisma.ChatCreateWithoutOwnerInput, Prisma.ChatUncheckedCreateWithoutOwnerInput>
}

export type ChatUpdateWithWhereUniqueWithoutOwnerInput = {
  where: Prisma.ChatWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatUpdateWithoutOwnerInput, Prisma.ChatUncheckedUpdateWithoutOwnerInput>
}

export type ChatUpdateManyWithWhereWithoutOwnerInput = {
  where: Prisma.ChatScalarWhereInput
  data: Prisma.XOR<Prisma.ChatUpdateManyMutationInput, Prisma.ChatUncheckedUpdateManyWithoutOwnerInput>
}

export type ChatScalarWhereInput = {
  AND?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[]
  OR?: Prisma.ChatScalarWhereInput[]
  NOT?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[]
  id?: Prisma.StringFilter<"Chat"> | string
  name?: Prisma.StringNullableFilter<"Chat"> | string | null
  type?: Prisma.StringFilter<"Chat"> | string
  image?: Prisma.StringNullableFilter<"Chat"> | string | null
  imageIv?: Prisma.StringNullableFilter<"Chat"> | string | null
  ownerId?: Prisma.StringFilter<"Chat"> | string
  salt?: Prisma.StringFilter<"Chat"> | string
}

export type ChatUpsertWithWhereUniqueWithoutParticipantsInput = {
  where: Prisma.ChatWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatUpdateWithoutParticipantsInput, Prisma.ChatUncheckedUpdateWithoutParticipantsInput>
  create: Prisma.XOR<Prisma.ChatCreateWithoutParticipantsInput, Prisma.ChatUncheckedCreateWithoutParticipantsInput>
}

export type ChatUpdateWithWhereUniqueWithoutParticipantsInput = {
  where: Prisma.ChatWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatUpdateWithoutParticipantsInput, Prisma.ChatUncheckedUpdateWithoutParticipantsInput>
}

export type ChatUpdateManyWithWhereWithoutParticipantsInput = {
  where: Prisma.ChatScalarWhereInput
  data: Prisma.XOR<Prisma.ChatUpdateManyMutationInput, Prisma.ChatUncheckedUpdateManyWithoutParticipantsInput>
}

export type ChatCreateWithoutMessagesInput = {
  id?: string
  name?: string | null
  type: string
  image?: string | null
  imageIv?: string | null
  salt: string
  owner: Prisma.UserCreateNestedOneWithoutOwnedChatsInput
  participants?: Prisma.UserCreateNestedManyWithoutChatsInput
}

export type ChatUncheckedCreateWithoutMessagesInput = {
  id?: string
  name?: string | null
  type: string
  image?: string | null
  imageIv?: string | null
  ownerId: string
  salt: string
  participants?: Prisma.UserUncheckedCreateNestedManyWithoutChatsInput
}

export type ChatCreateOrConnectWithoutMessagesInput = {
  where: Prisma.ChatWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatCreateWithoutMessagesInput, Prisma.ChatUncheckedCreateWithoutMessagesInput>
}

export type ChatUpsertWithoutMessagesInput = {
  update: Prisma.XOR<Prisma.ChatUpdateWithoutMessagesInput, Prisma.ChatUncheckedUpdateWithoutMessagesInput>
  create: Prisma.XOR<Prisma.ChatCreateWithoutMessagesInput, Prisma.ChatUncheckedCreateWithoutMessagesInput>
  where?: Prisma.ChatWhereInput
}

export type ChatUpdateToOneWithWhereWithoutMessagesInput = {
  where?: Prisma.ChatWhereInput
  data: Prisma.XOR<Prisma.ChatUpdateWithoutMessagesInput, Prisma.ChatUncheckedUpdateWithoutMessagesInput>
}

export type ChatUpdateWithoutMessagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageIv?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  salt?: Prisma.StringFieldUpdateOperationsInput | string
  owner?: Prisma.UserUpdateOneRequiredWithoutOwnedChatsNestedInput
  participants?: Prisma.UserUpdateManyWithoutChatsNestedInput
}

export type ChatUncheckedUpdateWithoutMessagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageIv?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  salt?: Prisma.StringFieldUpdateOperationsInput | string
  participants?: Prisma.UserUncheckedUpdateManyWithoutChatsNestedInput
}

export type ChatCreateManyOwnerInput = {
  id?: string
  name?: string | null
  type: string
  image?: string | null
  imageIv?: string | null
  salt: string
}

export type ChatUpdateWithoutOwnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageIv?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  salt?: Prisma.StringFieldUpdateOperationsInput | string
  participants?: Prisma.UserUpdateManyWithoutChatsNestedInput
  messages?: Prisma.MessageUpdateManyWithoutChatNestedInput
}

export type ChatUncheckedUpdateWithoutOwnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageIv?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  salt?: Prisma.StringFieldUpdateOperationsInput | string
  participants?: Prisma.UserUncheckedUpdateManyWithoutChatsNestedInput
  messages?: Prisma.MessageUncheckedUpdateManyWithoutChatNestedInput
}

export type ChatUncheckedUpdateManyWithoutOwnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageIv?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  salt?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ChatUpdateWithoutParticipantsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageIv?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  salt?: Prisma.StringFieldUpdateOperationsInput | string
  owner?: Prisma.UserUpdateOneRequiredWithoutOwnedChatsNestedInput
  messages?: Prisma.MessageUpdateManyWithoutChatNestedInput
}

export type ChatUncheckedUpdateWithoutParticipantsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageIv?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  salt?: Prisma.StringFieldUpdateOperationsInput | string
  messages?: Prisma.MessageUncheckedUpdateManyWithoutChatNestedInput
}

export type ChatUncheckedUpdateManyWithoutParticipantsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageIv?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  salt?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type ChatCountOutputType
 */

export type ChatCountOutputType = {
  participants: number
  messages: number
}

export type ChatCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  participants?: boolean | ChatCountOutputTypeCountParticipantsArgs
  messages?: boolean | ChatCountOutputTypeCountMessagesArgs
}

/**
 * ChatCountOutputType without action
 */
export type ChatCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatCountOutputType
   */
  select?: Prisma.ChatCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ChatCountOutputType without action
 */
export type ChatCountOutputTypeCountParticipantsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserWhereInput
}

/**
 * ChatCountOutputType without action
 */
export type ChatCountOutputTypeCountMessagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MessageWhereInput
}


export type ChatSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  type?: boolean
  image?: boolean
  imageIv?: boolean
  ownerId?: boolean
  salt?: boolean
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  participants?: boolean | Prisma.Chat$participantsArgs<ExtArgs>
  messages?: boolean | Prisma.Chat$messagesArgs<ExtArgs>
  _count?: boolean | Prisma.ChatCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chat"]>

export type ChatSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  type?: boolean
  image?: boolean
  imageIv?: boolean
  ownerId?: boolean
  salt?: boolean
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chat"]>

export type ChatSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  type?: boolean
  image?: boolean
  imageIv?: boolean
  ownerId?: boolean
  salt?: boolean
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chat"]>

export type ChatSelectScalar = {
  id?: boolean
  name?: boolean
  type?: boolean
  image?: boolean
  imageIv?: boolean
  ownerId?: boolean
  salt?: boolean
}

export type ChatOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "type" | "image" | "imageIv" | "ownerId" | "salt", ExtArgs["result"]["chat"]>
export type ChatInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  participants?: boolean | Prisma.Chat$participantsArgs<ExtArgs>
  messages?: boolean | Prisma.Chat$messagesArgs<ExtArgs>
  _count?: boolean | Prisma.ChatCountOutputTypeDefaultArgs<ExtArgs>
}
export type ChatIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ChatIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ChatPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Chat"
  objects: {
    owner: Prisma.$UserPayload<ExtArgs>
    participants: Prisma.$UserPayload<ExtArgs>[]
    messages: Prisma.$MessagePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string | null
    type: string
    image: string | null
    imageIv: string | null
    ownerId: string
    salt: string
  }, ExtArgs["result"]["chat"]>
  composites: {}
}

export type ChatGetPayload<S extends boolean | null | undefined | ChatDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChatPayload, S>

export type ChatCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChatFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChatCountAggregateInputType | true
  }

export interface ChatDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chat'], meta: { name: 'Chat' } }
  /**
   * Find zero or one Chat that matches the filter.
   * @param {ChatFindUniqueArgs} args - Arguments to find a Chat
   * @example
   * // Get one Chat
   * const chat = await prisma.chat.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChatFindUniqueArgs>(args: Prisma.SelectSubset<T, ChatFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Chat that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChatFindUniqueOrThrowArgs} args - Arguments to find a Chat
   * @example
   * // Get one Chat
   * const chat = await prisma.chat.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChatFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChatFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Chat that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatFindFirstArgs} args - Arguments to find a Chat
   * @example
   * // Get one Chat
   * const chat = await prisma.chat.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChatFindFirstArgs>(args?: Prisma.SelectSubset<T, ChatFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Chat that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatFindFirstOrThrowArgs} args - Arguments to find a Chat
   * @example
   * // Get one Chat
   * const chat = await prisma.chat.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChatFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChatFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Chats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Chats
   * const chats = await prisma.chat.findMany()
   * 
   * // Get first 10 Chats
   * const chats = await prisma.chat.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chatWithIdOnly = await prisma.chat.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChatFindManyArgs>(args?: Prisma.SelectSubset<T, ChatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Chat.
   * @param {ChatCreateArgs} args - Arguments to create a Chat.
   * @example
   * // Create one Chat
   * const Chat = await prisma.chat.create({
   *   data: {
   *     // ... data to create a Chat
   *   }
   * })
   * 
   */
  create<T extends ChatCreateArgs>(args: Prisma.SelectSubset<T, ChatCreateArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Chats.
   * @param {ChatCreateManyArgs} args - Arguments to create many Chats.
   * @example
   * // Create many Chats
   * const chat = await prisma.chat.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChatCreateManyArgs>(args?: Prisma.SelectSubset<T, ChatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Chats and returns the data saved in the database.
   * @param {ChatCreateManyAndReturnArgs} args - Arguments to create many Chats.
   * @example
   * // Create many Chats
   * const chat = await prisma.chat.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Chats and only return the `id`
   * const chatWithIdOnly = await prisma.chat.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ChatCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ChatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Chat.
   * @param {ChatDeleteArgs} args - Arguments to delete one Chat.
   * @example
   * // Delete one Chat
   * const Chat = await prisma.chat.delete({
   *   where: {
   *     // ... filter to delete one Chat
   *   }
   * })
   * 
   */
  delete<T extends ChatDeleteArgs>(args: Prisma.SelectSubset<T, ChatDeleteArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Chat.
   * @param {ChatUpdateArgs} args - Arguments to update one Chat.
   * @example
   * // Update one Chat
   * const chat = await prisma.chat.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChatUpdateArgs>(args: Prisma.SelectSubset<T, ChatUpdateArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Chats.
   * @param {ChatDeleteManyArgs} args - Arguments to filter Chats to delete.
   * @example
   * // Delete a few Chats
   * const { count } = await prisma.chat.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChatDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Chats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Chats
   * const chat = await prisma.chat.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChatUpdateManyArgs>(args: Prisma.SelectSubset<T, ChatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Chats and returns the data updated in the database.
   * @param {ChatUpdateManyAndReturnArgs} args - Arguments to update many Chats.
   * @example
   * // Update many Chats
   * const chat = await prisma.chat.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Chats and only return the `id`
   * const chatWithIdOnly = await prisma.chat.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ChatUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ChatUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Chat.
   * @param {ChatUpsertArgs} args - Arguments to update or create a Chat.
   * @example
   * // Update or create a Chat
   * const chat = await prisma.chat.upsert({
   *   create: {
   *     // ... data to create a Chat
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Chat we want to update
   *   }
   * })
   */
  upsert<T extends ChatUpsertArgs>(args: Prisma.SelectSubset<T, ChatUpsertArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Chats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatCountArgs} args - Arguments to filter Chats to count.
   * @example
   * // Count the number of Chats
   * const count = await prisma.chat.count({
   *   where: {
   *     // ... the filter for the Chats we want to count
   *   }
   * })
  **/
  count<T extends ChatCountArgs>(
    args?: Prisma.Subset<T, ChatCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChatCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Chat.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChatAggregateArgs>(args: Prisma.Subset<T, ChatAggregateArgs>): Prisma.PrismaPromise<GetChatAggregateType<T>>

  /**
   * Group by Chat.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChatGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChatGroupByArgs['orderBy'] }
      : { orderBy?: ChatGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Chat model
 */
readonly fields: ChatFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Chat.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChatClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  owner<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  participants<T extends Prisma.Chat$participantsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Chat$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  messages<T extends Prisma.Chat$messagesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Chat$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Chat model
 */
export interface ChatFieldRefs {
  readonly id: Prisma.FieldRef<"Chat", 'String'>
  readonly name: Prisma.FieldRef<"Chat", 'String'>
  readonly type: Prisma.FieldRef<"Chat", 'String'>
  readonly image: Prisma.FieldRef<"Chat", 'String'>
  readonly imageIv: Prisma.FieldRef<"Chat", 'String'>
  readonly ownerId: Prisma.FieldRef<"Chat", 'String'>
  readonly salt: Prisma.FieldRef<"Chat", 'String'>
}
    

// Custom InputTypes
/**
 * Chat findUnique
 */
export type ChatFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  /**
   * Filter, which Chat to fetch.
   */
  where: Prisma.ChatWhereUniqueInput
}

/**
 * Chat findUniqueOrThrow
 */
export type ChatFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  /**
   * Filter, which Chat to fetch.
   */
  where: Prisma.ChatWhereUniqueInput
}

/**
 * Chat findFirst
 */
export type ChatFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  /**
   * Filter, which Chat to fetch.
   */
  where?: Prisma.ChatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chats to fetch.
   */
  orderBy?: Prisma.ChatOrderByWithRelationInput | Prisma.ChatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Chats.
   */
  cursor?: Prisma.ChatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Chats.
   */
  distinct?: Prisma.ChatScalarFieldEnum | Prisma.ChatScalarFieldEnum[]
}

/**
 * Chat findFirstOrThrow
 */
export type ChatFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  /**
   * Filter, which Chat to fetch.
   */
  where?: Prisma.ChatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chats to fetch.
   */
  orderBy?: Prisma.ChatOrderByWithRelationInput | Prisma.ChatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Chats.
   */
  cursor?: Prisma.ChatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Chats.
   */
  distinct?: Prisma.ChatScalarFieldEnum | Prisma.ChatScalarFieldEnum[]
}

/**
 * Chat findMany
 */
export type ChatFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  /**
   * Filter, which Chats to fetch.
   */
  where?: Prisma.ChatWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chats to fetch.
   */
  orderBy?: Prisma.ChatOrderByWithRelationInput | Prisma.ChatOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Chats.
   */
  cursor?: Prisma.ChatWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chats.
   */
  skip?: number
  distinct?: Prisma.ChatScalarFieldEnum | Prisma.ChatScalarFieldEnum[]
}

/**
 * Chat create
 */
export type ChatCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  /**
   * The data needed to create a Chat.
   */
  data: Prisma.XOR<Prisma.ChatCreateInput, Prisma.ChatUncheckedCreateInput>
}

/**
 * Chat createMany
 */
export type ChatCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Chats.
   */
  data: Prisma.ChatCreateManyInput | Prisma.ChatCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Chat createManyAndReturn
 */
export type ChatCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * The data used to create many Chats.
   */
  data: Prisma.ChatCreateManyInput | Prisma.ChatCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Chat update
 */
export type ChatUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  /**
   * The data needed to update a Chat.
   */
  data: Prisma.XOR<Prisma.ChatUpdateInput, Prisma.ChatUncheckedUpdateInput>
  /**
   * Choose, which Chat to update.
   */
  where: Prisma.ChatWhereUniqueInput
}

/**
 * Chat updateMany
 */
export type ChatUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Chats.
   */
  data: Prisma.XOR<Prisma.ChatUpdateManyMutationInput, Prisma.ChatUncheckedUpdateManyInput>
  /**
   * Filter which Chats to update
   */
  where?: Prisma.ChatWhereInput
  /**
   * Limit how many Chats to update.
   */
  limit?: number
}

/**
 * Chat updateManyAndReturn
 */
export type ChatUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * The data used to update Chats.
   */
  data: Prisma.XOR<Prisma.ChatUpdateManyMutationInput, Prisma.ChatUncheckedUpdateManyInput>
  /**
   * Filter which Chats to update
   */
  where?: Prisma.ChatWhereInput
  /**
   * Limit how many Chats to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Chat upsert
 */
export type ChatUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  /**
   * The filter to search for the Chat to update in case it exists.
   */
  where: Prisma.ChatWhereUniqueInput
  /**
   * In case the Chat found by the `where` argument doesn't exist, create a new Chat with this data.
   */
  create: Prisma.XOR<Prisma.ChatCreateInput, Prisma.ChatUncheckedCreateInput>
  /**
   * In case the Chat was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChatUpdateInput, Prisma.ChatUncheckedUpdateInput>
}

/**
 * Chat delete
 */
export type ChatDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  /**
   * Filter which Chat to delete.
   */
  where: Prisma.ChatWhereUniqueInput
}

/**
 * Chat deleteMany
 */
export type ChatDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Chats to delete
   */
  where?: Prisma.ChatWhereInput
  /**
   * Limit how many Chats to delete.
   */
  limit?: number
}

/**
 * Chat.participants
 */
export type Chat$participantsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  cursor?: Prisma.UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * Chat.messages
 */
export type Chat$messagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Message
   */
  select?: Prisma.MessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Message
   */
  omit?: Prisma.MessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MessageInclude<ExtArgs> | null
  where?: Prisma.MessageWhereInput
  orderBy?: Prisma.MessageOrderByWithRelationInput | Prisma.MessageOrderByWithRelationInput[]
  cursor?: Prisma.MessageWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MessageScalarFieldEnum | Prisma.MessageScalarFieldEnum[]
}

/**
 * Chat without action
 */
export type ChatDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
}
