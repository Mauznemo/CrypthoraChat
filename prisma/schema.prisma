// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"] //Change this to match your target environment
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  username     String        @unique
  displayName  String
  password     String
  profilePic   String? // path to encrypted blob
  profileIv    String? //IV for decryption, base64
  userChatKeys UserChatKey[] // encrypted keys for each chat
  isAdmin      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  sessions     Session[]
  ownedChats   Chat[]        @relation("OwnedChats")
  chats        Chat[]        @relation("ChatParticipants")
  messages     Message[]     @relation("SentMessages")
  readMessages Message[]     @relation("ReadMessages")
}

model UserChatKey {
  userId       String
  chatId       String
  encryptedKey String //base64
  user         User   @relation(fields: [userId], references: [id])

  @@id([userId, chatId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id           String    @id @default(uuid())
  name         String? // Group name, null for DM
  type         String // 'dm' or 'group'
  image        String? // path to encrypted blob
  imageIv      String? //IV for decryption, base64
  ownerId      String
  owner        User      @relation("OwnedChats", fields: [ownerId], references: [id])
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  salt         String // salt for encryption, base64
}

model Message {
  id                 String    @id @default(uuid())
  chatId             String
  senderId           String
  attachments        String[]
  encryptedReactions String[] //userId:encryptedReactions base64
  readBy             User[]    @relation("ReadMessages")
  encryptedContent   String // Encrypted message blob, base64
  isEdited           Boolean   @default(false)
  timestamp          DateTime  @default(now())
  user               User      @relation("SentMessages", fields: [senderId], references: [id])
  chat               Chat      @relation(fields: [chatId], references: [id])
  replyTo            Message?  @relation("Replies", fields: [replyToId], references: [id])
  replyToId          String?
  replies            Message[] @relation("Replies")
}

model ServerSettings {
  id               String   @id @default("singleton")
  allowedUsernames String[]

  @@unique([id]) // Ensure only one instance exists
}
