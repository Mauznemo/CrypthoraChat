
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ServerSettings` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ServerSettings
 * 
 */
export type ServerSettingsModel = runtime.Types.Result.DefaultSelection<Prisma.$ServerSettingsPayload>

export type AggregateServerSettings = {
  _count: ServerSettingsCountAggregateOutputType | null
  _min: ServerSettingsMinAggregateOutputType | null
  _max: ServerSettingsMaxAggregateOutputType | null
}

export type ServerSettingsMinAggregateOutputType = {
  id: string | null
}

export type ServerSettingsMaxAggregateOutputType = {
  id: string | null
}

export type ServerSettingsCountAggregateOutputType = {
  id: number
  allowedUsernames: number
  _all: number
}


export type ServerSettingsMinAggregateInputType = {
  id?: true
}

export type ServerSettingsMaxAggregateInputType = {
  id?: true
}

export type ServerSettingsCountAggregateInputType = {
  id?: true
  allowedUsernames?: true
  _all?: true
}

export type ServerSettingsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ServerSettings to aggregate.
   */
  where?: Prisma.ServerSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServerSettings to fetch.
   */
  orderBy?: Prisma.ServerSettingsOrderByWithRelationInput | Prisma.ServerSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ServerSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServerSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServerSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ServerSettings
  **/
  _count?: true | ServerSettingsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ServerSettingsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ServerSettingsMaxAggregateInputType
}

export type GetServerSettingsAggregateType<T extends ServerSettingsAggregateArgs> = {
      [P in keyof T & keyof AggregateServerSettings]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateServerSettings[P]>
    : Prisma.GetScalarType<T[P], AggregateServerSettings[P]>
}




export type ServerSettingsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ServerSettingsWhereInput
  orderBy?: Prisma.ServerSettingsOrderByWithAggregationInput | Prisma.ServerSettingsOrderByWithAggregationInput[]
  by: Prisma.ServerSettingsScalarFieldEnum[] | Prisma.ServerSettingsScalarFieldEnum
  having?: Prisma.ServerSettingsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ServerSettingsCountAggregateInputType | true
  _min?: ServerSettingsMinAggregateInputType
  _max?: ServerSettingsMaxAggregateInputType
}

export type ServerSettingsGroupByOutputType = {
  id: string
  allowedUsernames: string[]
  _count: ServerSettingsCountAggregateOutputType | null
  _min: ServerSettingsMinAggregateOutputType | null
  _max: ServerSettingsMaxAggregateOutputType | null
}

type GetServerSettingsGroupByPayload<T extends ServerSettingsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ServerSettingsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ServerSettingsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ServerSettingsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ServerSettingsGroupByOutputType[P]>
      }
    >
  >



export type ServerSettingsWhereInput = {
  AND?: Prisma.ServerSettingsWhereInput | Prisma.ServerSettingsWhereInput[]
  OR?: Prisma.ServerSettingsWhereInput[]
  NOT?: Prisma.ServerSettingsWhereInput | Prisma.ServerSettingsWhereInput[]
  id?: Prisma.StringFilter<"ServerSettings"> | string
  allowedUsernames?: Prisma.StringNullableListFilter<"ServerSettings">
}

export type ServerSettingsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  allowedUsernames?: Prisma.SortOrder
}

export type ServerSettingsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ServerSettingsWhereInput | Prisma.ServerSettingsWhereInput[]
  OR?: Prisma.ServerSettingsWhereInput[]
  NOT?: Prisma.ServerSettingsWhereInput | Prisma.ServerSettingsWhereInput[]
  allowedUsernames?: Prisma.StringNullableListFilter<"ServerSettings">
}, "id" | "id">

export type ServerSettingsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  allowedUsernames?: Prisma.SortOrder
  _count?: Prisma.ServerSettingsCountOrderByAggregateInput
  _max?: Prisma.ServerSettingsMaxOrderByAggregateInput
  _min?: Prisma.ServerSettingsMinOrderByAggregateInput
}

export type ServerSettingsScalarWhereWithAggregatesInput = {
  AND?: Prisma.ServerSettingsScalarWhereWithAggregatesInput | Prisma.ServerSettingsScalarWhereWithAggregatesInput[]
  OR?: Prisma.ServerSettingsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ServerSettingsScalarWhereWithAggregatesInput | Prisma.ServerSettingsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ServerSettings"> | string
  allowedUsernames?: Prisma.StringNullableListFilter<"ServerSettings">
}

export type ServerSettingsCreateInput = {
  id?: string
  allowedUsernames?: Prisma.ServerSettingsCreateallowedUsernamesInput | string[]
}

export type ServerSettingsUncheckedCreateInput = {
  id?: string
  allowedUsernames?: Prisma.ServerSettingsCreateallowedUsernamesInput | string[]
}

export type ServerSettingsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  allowedUsernames?: Prisma.ServerSettingsUpdateallowedUsernamesInput | string[]
}

export type ServerSettingsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  allowedUsernames?: Prisma.ServerSettingsUpdateallowedUsernamesInput | string[]
}

export type ServerSettingsCreateManyInput = {
  id?: string
  allowedUsernames?: Prisma.ServerSettingsCreateallowedUsernamesInput | string[]
}

export type ServerSettingsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  allowedUsernames?: Prisma.ServerSettingsUpdateallowedUsernamesInput | string[]
}

export type ServerSettingsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  allowedUsernames?: Prisma.ServerSettingsUpdateallowedUsernamesInput | string[]
}

export type ServerSettingsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  allowedUsernames?: Prisma.SortOrder
}

export type ServerSettingsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ServerSettingsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ServerSettingsCreateallowedUsernamesInput = {
  set: string[]
}

export type ServerSettingsUpdateallowedUsernamesInput = {
  set?: string[]
  push?: string | string[]
}



export type ServerSettingsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  allowedUsernames?: boolean
}, ExtArgs["result"]["serverSettings"]>

export type ServerSettingsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  allowedUsernames?: boolean
}, ExtArgs["result"]["serverSettings"]>

export type ServerSettingsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  allowedUsernames?: boolean
}, ExtArgs["result"]["serverSettings"]>

export type ServerSettingsSelectScalar = {
  id?: boolean
  allowedUsernames?: boolean
}

export type ServerSettingsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "allowedUsernames", ExtArgs["result"]["serverSettings"]>

export type $ServerSettingsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ServerSettings"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    allowedUsernames: string[]
  }, ExtArgs["result"]["serverSettings"]>
  composites: {}
}

export type ServerSettingsGetPayload<S extends boolean | null | undefined | ServerSettingsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ServerSettingsPayload, S>

export type ServerSettingsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ServerSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ServerSettingsCountAggregateInputType | true
  }

export interface ServerSettingsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServerSettings'], meta: { name: 'ServerSettings' } }
  /**
   * Find zero or one ServerSettings that matches the filter.
   * @param {ServerSettingsFindUniqueArgs} args - Arguments to find a ServerSettings
   * @example
   * // Get one ServerSettings
   * const serverSettings = await prisma.serverSettings.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ServerSettingsFindUniqueArgs>(args: Prisma.SelectSubset<T, ServerSettingsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ServerSettingsClient<runtime.Types.Result.GetResult<Prisma.$ServerSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ServerSettings that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ServerSettingsFindUniqueOrThrowArgs} args - Arguments to find a ServerSettings
   * @example
   * // Get one ServerSettings
   * const serverSettings = await prisma.serverSettings.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ServerSettingsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ServerSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ServerSettingsClient<runtime.Types.Result.GetResult<Prisma.$ServerSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ServerSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerSettingsFindFirstArgs} args - Arguments to find a ServerSettings
   * @example
   * // Get one ServerSettings
   * const serverSettings = await prisma.serverSettings.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ServerSettingsFindFirstArgs>(args?: Prisma.SelectSubset<T, ServerSettingsFindFirstArgs<ExtArgs>>): Prisma.Prisma__ServerSettingsClient<runtime.Types.Result.GetResult<Prisma.$ServerSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ServerSettings that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerSettingsFindFirstOrThrowArgs} args - Arguments to find a ServerSettings
   * @example
   * // Get one ServerSettings
   * const serverSettings = await prisma.serverSettings.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ServerSettingsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ServerSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ServerSettingsClient<runtime.Types.Result.GetResult<Prisma.$ServerSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ServerSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ServerSettings
   * const serverSettings = await prisma.serverSettings.findMany()
   * 
   * // Get first 10 ServerSettings
   * const serverSettings = await prisma.serverSettings.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const serverSettingsWithIdOnly = await prisma.serverSettings.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ServerSettingsFindManyArgs>(args?: Prisma.SelectSubset<T, ServerSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServerSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ServerSettings.
   * @param {ServerSettingsCreateArgs} args - Arguments to create a ServerSettings.
   * @example
   * // Create one ServerSettings
   * const ServerSettings = await prisma.serverSettings.create({
   *   data: {
   *     // ... data to create a ServerSettings
   *   }
   * })
   * 
   */
  create<T extends ServerSettingsCreateArgs>(args: Prisma.SelectSubset<T, ServerSettingsCreateArgs<ExtArgs>>): Prisma.Prisma__ServerSettingsClient<runtime.Types.Result.GetResult<Prisma.$ServerSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ServerSettings.
   * @param {ServerSettingsCreateManyArgs} args - Arguments to create many ServerSettings.
   * @example
   * // Create many ServerSettings
   * const serverSettings = await prisma.serverSettings.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ServerSettingsCreateManyArgs>(args?: Prisma.SelectSubset<T, ServerSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ServerSettings and returns the data saved in the database.
   * @param {ServerSettingsCreateManyAndReturnArgs} args - Arguments to create many ServerSettings.
   * @example
   * // Create many ServerSettings
   * const serverSettings = await prisma.serverSettings.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ServerSettings and only return the `id`
   * const serverSettingsWithIdOnly = await prisma.serverSettings.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ServerSettingsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ServerSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServerSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ServerSettings.
   * @param {ServerSettingsDeleteArgs} args - Arguments to delete one ServerSettings.
   * @example
   * // Delete one ServerSettings
   * const ServerSettings = await prisma.serverSettings.delete({
   *   where: {
   *     // ... filter to delete one ServerSettings
   *   }
   * })
   * 
   */
  delete<T extends ServerSettingsDeleteArgs>(args: Prisma.SelectSubset<T, ServerSettingsDeleteArgs<ExtArgs>>): Prisma.Prisma__ServerSettingsClient<runtime.Types.Result.GetResult<Prisma.$ServerSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ServerSettings.
   * @param {ServerSettingsUpdateArgs} args - Arguments to update one ServerSettings.
   * @example
   * // Update one ServerSettings
   * const serverSettings = await prisma.serverSettings.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ServerSettingsUpdateArgs>(args: Prisma.SelectSubset<T, ServerSettingsUpdateArgs<ExtArgs>>): Prisma.Prisma__ServerSettingsClient<runtime.Types.Result.GetResult<Prisma.$ServerSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ServerSettings.
   * @param {ServerSettingsDeleteManyArgs} args - Arguments to filter ServerSettings to delete.
   * @example
   * // Delete a few ServerSettings
   * const { count } = await prisma.serverSettings.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ServerSettingsDeleteManyArgs>(args?: Prisma.SelectSubset<T, ServerSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ServerSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerSettingsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ServerSettings
   * const serverSettings = await prisma.serverSettings.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ServerSettingsUpdateManyArgs>(args: Prisma.SelectSubset<T, ServerSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ServerSettings and returns the data updated in the database.
   * @param {ServerSettingsUpdateManyAndReturnArgs} args - Arguments to update many ServerSettings.
   * @example
   * // Update many ServerSettings
   * const serverSettings = await prisma.serverSettings.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ServerSettings and only return the `id`
   * const serverSettingsWithIdOnly = await prisma.serverSettings.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ServerSettingsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ServerSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServerSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ServerSettings.
   * @param {ServerSettingsUpsertArgs} args - Arguments to update or create a ServerSettings.
   * @example
   * // Update or create a ServerSettings
   * const serverSettings = await prisma.serverSettings.upsert({
   *   create: {
   *     // ... data to create a ServerSettings
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ServerSettings we want to update
   *   }
   * })
   */
  upsert<T extends ServerSettingsUpsertArgs>(args: Prisma.SelectSubset<T, ServerSettingsUpsertArgs<ExtArgs>>): Prisma.Prisma__ServerSettingsClient<runtime.Types.Result.GetResult<Prisma.$ServerSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ServerSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerSettingsCountArgs} args - Arguments to filter ServerSettings to count.
   * @example
   * // Count the number of ServerSettings
   * const count = await prisma.serverSettings.count({
   *   where: {
   *     // ... the filter for the ServerSettings we want to count
   *   }
   * })
  **/
  count<T extends ServerSettingsCountArgs>(
    args?: Prisma.Subset<T, ServerSettingsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ServerSettingsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ServerSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ServerSettingsAggregateArgs>(args: Prisma.Subset<T, ServerSettingsAggregateArgs>): Prisma.PrismaPromise<GetServerSettingsAggregateType<T>>

  /**
   * Group by ServerSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServerSettingsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ServerSettingsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ServerSettingsGroupByArgs['orderBy'] }
      : { orderBy?: ServerSettingsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ServerSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServerSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ServerSettings model
 */
readonly fields: ServerSettingsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ServerSettings.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ServerSettingsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ServerSettings model
 */
export interface ServerSettingsFieldRefs {
  readonly id: Prisma.FieldRef<"ServerSettings", 'String'>
  readonly allowedUsernames: Prisma.FieldRef<"ServerSettings", 'String[]'>
}
    

// Custom InputTypes
/**
 * ServerSettings findUnique
 */
export type ServerSettingsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerSettings
   */
  select?: Prisma.ServerSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerSettings
   */
  omit?: Prisma.ServerSettingsOmit<ExtArgs> | null
  /**
   * Filter, which ServerSettings to fetch.
   */
  where: Prisma.ServerSettingsWhereUniqueInput
}

/**
 * ServerSettings findUniqueOrThrow
 */
export type ServerSettingsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerSettings
   */
  select?: Prisma.ServerSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerSettings
   */
  omit?: Prisma.ServerSettingsOmit<ExtArgs> | null
  /**
   * Filter, which ServerSettings to fetch.
   */
  where: Prisma.ServerSettingsWhereUniqueInput
}

/**
 * ServerSettings findFirst
 */
export type ServerSettingsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerSettings
   */
  select?: Prisma.ServerSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerSettings
   */
  omit?: Prisma.ServerSettingsOmit<ExtArgs> | null
  /**
   * Filter, which ServerSettings to fetch.
   */
  where?: Prisma.ServerSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServerSettings to fetch.
   */
  orderBy?: Prisma.ServerSettingsOrderByWithRelationInput | Prisma.ServerSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ServerSettings.
   */
  cursor?: Prisma.ServerSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServerSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServerSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ServerSettings.
   */
  distinct?: Prisma.ServerSettingsScalarFieldEnum | Prisma.ServerSettingsScalarFieldEnum[]
}

/**
 * ServerSettings findFirstOrThrow
 */
export type ServerSettingsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerSettings
   */
  select?: Prisma.ServerSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerSettings
   */
  omit?: Prisma.ServerSettingsOmit<ExtArgs> | null
  /**
   * Filter, which ServerSettings to fetch.
   */
  where?: Prisma.ServerSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServerSettings to fetch.
   */
  orderBy?: Prisma.ServerSettingsOrderByWithRelationInput | Prisma.ServerSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ServerSettings.
   */
  cursor?: Prisma.ServerSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServerSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServerSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ServerSettings.
   */
  distinct?: Prisma.ServerSettingsScalarFieldEnum | Prisma.ServerSettingsScalarFieldEnum[]
}

/**
 * ServerSettings findMany
 */
export type ServerSettingsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerSettings
   */
  select?: Prisma.ServerSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerSettings
   */
  omit?: Prisma.ServerSettingsOmit<ExtArgs> | null
  /**
   * Filter, which ServerSettings to fetch.
   */
  where?: Prisma.ServerSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServerSettings to fetch.
   */
  orderBy?: Prisma.ServerSettingsOrderByWithRelationInput | Prisma.ServerSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ServerSettings.
   */
  cursor?: Prisma.ServerSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServerSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServerSettings.
   */
  skip?: number
  distinct?: Prisma.ServerSettingsScalarFieldEnum | Prisma.ServerSettingsScalarFieldEnum[]
}

/**
 * ServerSettings create
 */
export type ServerSettingsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerSettings
   */
  select?: Prisma.ServerSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerSettings
   */
  omit?: Prisma.ServerSettingsOmit<ExtArgs> | null
  /**
   * The data needed to create a ServerSettings.
   */
  data?: Prisma.XOR<Prisma.ServerSettingsCreateInput, Prisma.ServerSettingsUncheckedCreateInput>
}

/**
 * ServerSettings createMany
 */
export type ServerSettingsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ServerSettings.
   */
  data: Prisma.ServerSettingsCreateManyInput | Prisma.ServerSettingsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ServerSettings createManyAndReturn
 */
export type ServerSettingsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerSettings
   */
  select?: Prisma.ServerSettingsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ServerSettings
   */
  omit?: Prisma.ServerSettingsOmit<ExtArgs> | null
  /**
   * The data used to create many ServerSettings.
   */
  data: Prisma.ServerSettingsCreateManyInput | Prisma.ServerSettingsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ServerSettings update
 */
export type ServerSettingsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerSettings
   */
  select?: Prisma.ServerSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerSettings
   */
  omit?: Prisma.ServerSettingsOmit<ExtArgs> | null
  /**
   * The data needed to update a ServerSettings.
   */
  data: Prisma.XOR<Prisma.ServerSettingsUpdateInput, Prisma.ServerSettingsUncheckedUpdateInput>
  /**
   * Choose, which ServerSettings to update.
   */
  where: Prisma.ServerSettingsWhereUniqueInput
}

/**
 * ServerSettings updateMany
 */
export type ServerSettingsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ServerSettings.
   */
  data: Prisma.XOR<Prisma.ServerSettingsUpdateManyMutationInput, Prisma.ServerSettingsUncheckedUpdateManyInput>
  /**
   * Filter which ServerSettings to update
   */
  where?: Prisma.ServerSettingsWhereInput
  /**
   * Limit how many ServerSettings to update.
   */
  limit?: number
}

/**
 * ServerSettings updateManyAndReturn
 */
export type ServerSettingsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerSettings
   */
  select?: Prisma.ServerSettingsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ServerSettings
   */
  omit?: Prisma.ServerSettingsOmit<ExtArgs> | null
  /**
   * The data used to update ServerSettings.
   */
  data: Prisma.XOR<Prisma.ServerSettingsUpdateManyMutationInput, Prisma.ServerSettingsUncheckedUpdateManyInput>
  /**
   * Filter which ServerSettings to update
   */
  where?: Prisma.ServerSettingsWhereInput
  /**
   * Limit how many ServerSettings to update.
   */
  limit?: number
}

/**
 * ServerSettings upsert
 */
export type ServerSettingsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerSettings
   */
  select?: Prisma.ServerSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerSettings
   */
  omit?: Prisma.ServerSettingsOmit<ExtArgs> | null
  /**
   * The filter to search for the ServerSettings to update in case it exists.
   */
  where: Prisma.ServerSettingsWhereUniqueInput
  /**
   * In case the ServerSettings found by the `where` argument doesn't exist, create a new ServerSettings with this data.
   */
  create: Prisma.XOR<Prisma.ServerSettingsCreateInput, Prisma.ServerSettingsUncheckedCreateInput>
  /**
   * In case the ServerSettings was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ServerSettingsUpdateInput, Prisma.ServerSettingsUncheckedUpdateInput>
}

/**
 * ServerSettings delete
 */
export type ServerSettingsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerSettings
   */
  select?: Prisma.ServerSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerSettings
   */
  omit?: Prisma.ServerSettingsOmit<ExtArgs> | null
  /**
   * Filter which ServerSettings to delete.
   */
  where: Prisma.ServerSettingsWhereUniqueInput
}

/**
 * ServerSettings deleteMany
 */
export type ServerSettingsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ServerSettings to delete
   */
  where?: Prisma.ServerSettingsWhereInput
  /**
   * Limit how many ServerSettings to delete.
   */
  limit?: number
}

/**
 * ServerSettings without action
 */
export type ServerSettingsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServerSettings
   */
  select?: Prisma.ServerSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServerSettings
   */
  omit?: Prisma.ServerSettingsOmit<ExtArgs> | null
}
